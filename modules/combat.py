import discord
from discord.ext import commands
from datetime import datetime, timedelta
import random
import asyncio
from typing import Dict, Any, Optional, Tuple, List, Union
from modules.utils import format_time
from config import (
    COMBAT_COOLDOWN, SECTS, EXP_STEAL_PERCENT, DAMAGE_VARIATION,
    SECT_EMOJIS, SECT_COLORS, MAX_EXP_STEAL
)


class Combat(commands.Cog):
    """H·ªá th·ªëng chi·∫øn ƒë·∫•u PvP gi·ªØa c√°c tu sƒ©"""

    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.combat_locks = {}  # Kh√≥a ƒë·ªÉ tr√°nh race condition
        self.active_duels = {}  # L∆∞u tr·ªØ c√°c l·ªùi m·ªùi ƒë·∫•u t·ª± do ƒëang ch·ªù

        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        self.default_exp_steal = 0.1  # 10%
        self.default_damage_variation = 0.2  # ¬±20%
        self.default_max_exp_steal = 500  # Gi·ªõi h·∫°n exp c∆∞·ªõp ƒë∆∞·ª£c

        # Danh s√°ch c√°c th√¥ng b√°o chi·∫øn ƒë·∫•u
        self.attack_messages = [
            "{attacker} thi tri·ªÉn {skill}, g√¢y {damage} s√°t th∆∞∆°ng cho {defender}!",
            "{attacker} v·∫≠n c√¥ng ph√≥ng ra m·ªôt ƒë·∫°o ki·∫øm kh√≠, g√¢y {damage} s√°t th∆∞∆°ng cho {defender}!",
            "{attacker} tung m·ªôt chi√™u {skill}, ƒë√°nh tr√∫ng {defender}, g√¢y {damage} s√°t th∆∞∆°ng!",
            "{attacker} b·∫•t ng·ªù t·∫•n c√¥ng, {defender} kh√¥ng k·ªãp ph√≤ng b·ªã, nh·∫≠n {damage} s√°t th∆∞∆°ng!",
            "{attacker} v·∫≠n d·ª•ng {skill}, g√¢y {damage} s√°t th∆∞∆°ng cho {defender}!"
        ]

        self.critical_messages = [
            "‚ö° {attacker} thi tri·ªÉn tuy·ªát k·ªπ {skill}, ƒë√°nh tr√∫ng ƒëi·ªÉm y·∫øu c·ªßa {defender}, g√¢y {damage} s√°t th∆∞∆°ng ch√≠ m·∫°ng!",
            "üíØ M·ªôt ƒë√≤n tr√≠ m·∫°ng! {attacker} g√¢y ra {damage} s√°t th∆∞∆°ng kinh ho√†ng cho {defender}!",
            "üåü {attacker} t√¨m ra ƒëi·ªÉm y·∫øu c·ªßa {defender}, tung ƒë√≤n quy·∫øt ƒë·ªãnh, g√¢y {damage} s√°t th∆∞∆°ng ch√≠ m·∫°ng!",
            "‚≠ê Tuy·ªát chi√™u! {attacker} g√¢y ra {damage} s√°t th∆∞∆°ng ch√≠ m·∫°ng v·ªõi {skill}!",
            "üî¥ ƒê√≤n ƒë√°nh tr√≠ m·∫°ng! {attacker} khi·∫øn {defender} tr·ªçng th∆∞∆°ng v·ªõi {damage} s√°t th∆∞∆°ng!"
        ]

        self.dodge_messages = [
            "üåÄ {defender} thi tri·ªÉn th√¢n ph√°p, n√© tr√°nh ƒë√≤n t·∫•n c√¥ng c·ªßa {attacker}!",
            "üí® {defender} l∆∞·ªõt nhanh nh∆∞ gi√≥, tr√°nh ƒë∆∞·ª£c ƒë√≤n t·∫•n c√¥ng!",
            "‚ú® {defender} thi tri·ªÉn tuy·ªát k·ªπ, khi·∫øn {attacker} ƒë√°nh tr∆∞·ª£t!",
            "üå™Ô∏è {defender} xoay ng∆∞·ªùi trong kh√¥ng trung, tr√°nh ƒë∆∞·ª£c ƒë√≤n t·∫•n c√¥ng c·ªßa {attacker}!",
            "üèÉ {defender} di chuy·ªÉn nhanh nh∆∞ ch·ªõp, khi·∫øn {attacker} kh√¥ng th·ªÉ ch·∫°m t·ªõi!"
        ]

        self.victory_messages = [
            "üèÜ {winner} ƒë√£ chi·∫øn th·∫Øng {loser} v√† c∆∞·ªõp ƒë∆∞·ª£c {exp} exp!",
            "üëë {winner} ƒë√£ ƒë√°nh b·∫°i {loser}! Thu ho·∫°ch {exp} exp!",
            "üåü Th·∫Øng l·ª£i! {winner} ƒë√£ h·∫° g·ª•c {loser}, nh·∫≠n {exp} exp!",
            "üî• {winner} ƒë√£ chi·∫øn th·∫Øng {loser}! Ph·∫ßn th∆∞·ªüng: {exp} exp!",
            "üí™ {winner} ƒë√£ ch·ª©ng minh s·ª©c m·∫°nh v∆∞·ª£t tr·ªôi so v·ªõi {loser}, c∆∞·ªõp ƒë∆∞·ª£c {exp} exp!"
        ]

    async def get_lock(self, user_id: int) -> asyncio.Lock:
        """L·∫•y ho·∫∑c t·∫°o lock cho ng∆∞·ªùi ch∆°i"""
        if user_id not in self.combat_locks:
            self.combat_locks[user_id] = asyncio.Lock()
        return self.combat_locks[user_id]

    @commands.command(name="combat", aliases=["pk", "pvp", "ƒë·∫•u"], usage="@ng∆∞·ªùi_ch∆°i")
    @commands.guild_only()
    @commands.cooldown(1, COMBAT_COOLDOWN, commands.BucketType.user)
    async def combat(self, ctx, target: discord.Member = None):
        """PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c ƒë·ªÉ c∆∞·ªõp exp"""
        if not target:
            await ctx.send("S·ª≠ d·ª•ng: !combat @ng∆∞·ªùi_ch∆°i")
            return

        # Ki·ªÉm tra self-combat
        if target.id == ctx.author.id:
            await ctx.send("Kh√¥ng th·ªÉ t·ª± ƒë√°nh ch√≠nh m√¨nh!")
            return

        # Ki·ªÉm tra ƒë√°nh bot
        if target.bot:
            await ctx.send("Kh√¥ng th·ªÉ ƒë√°nh bot! Ch·ªçn m·ªôt ng∆∞·ªùi ch∆°i th·∫≠t.")
            return

        # L·∫•y kh√≥a c·ªßa ng∆∞·ªùi t·∫•n c√¥ng
        async with await self.get_lock(ctx.author.id):
            try:
                # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
                loading_msg = await ctx.send("‚è≥ ƒêang ki·ªÉm tra ƒëi·ªÅu ki·ªán chi·∫øn ƒë·∫•u...")

                # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
                attacker = await self.db.get_player(ctx.author.id)
                defender = await self.db.get_player(target.id)

                if not attacker:
                    await loading_msg.delete()
                    await ctx.send(
                        f"{ctx.author.mention}, b·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! H√£y s·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i.")
                    return

                if not defender:
                    await loading_msg.delete()
                    await ctx.send(f"{target.mention} ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán!")
                    return

                # Ki·ªÉm tra cooldown
                now = datetime.now()
                last_combat = attacker.get('last_combat', datetime.min)
                if isinstance(last_combat, str):
                    try:
                        last_combat = datetime.strptime(last_combat, '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        last_combat = datetime.min

                cooldown_time = timedelta(seconds=COMBAT_COOLDOWN)
                if now - last_combat < cooldown_time:
                    remaining = cooldown_time - (now - last_combat)
                    await loading_msg.delete()
                    await ctx.send(
                        f"‚è≥ **{ctx.author.display_name}**, c√≤n {format_time(remaining.seconds)} n·ªØa m·ªõi c√≥ th·ªÉ chi·∫øn ƒë·∫•u!")
                    ctx.command.reset_cooldown(ctx)
                    return

                # Ki·ªÉm tra HP (n·∫øu c√≥ h·ªá th·ªëng HP)
                if attacker.get('hp', 100) <= 0:
                    await loading_msg.delete()
                    await ctx.send(
                        f"{ctx.author.mention}, b·∫°n ƒëang b·ªã th∆∞∆°ng n·∫∑ng, kh√¥ng th·ªÉ chi·∫øn ƒë·∫•u! H√£y h·ªìi ph·ª•c tr∆∞·ªõc.")
                    ctx.command.reset_cooldown(ctx)
                    return

                if defender.get('hp', 100) <= 0:
                    await loading_msg.delete()
                    await ctx.send(f"{target.mention} ƒëang b·ªã th∆∞∆°ng n·∫∑ng, kh√¥ng th·ªÉ chi·∫øn ƒë·∫•u!")
                    ctx.command.reset_cooldown(ctx)
                    return

                # Ki·ªÉm tra ch√™nh l·ªách c·∫£nh gi·ªõi
                attacker_level_index = self.get_level_index(attacker.get('level', 'Ph√†m Nh√¢n'))
                defender_level_index = self.get_level_index(defender.get('level', 'Ph√†m Nh√¢n'))

                level_diff = abs(attacker_level_index - defender_level_index)
                if level_diff > 5:  # Ch√™nh l·ªách qu√° 5 c·∫£nh gi·ªõi
                    await loading_msg.delete()
                    if attacker_level_index > defender_level_index:
                        await ctx.send(
                            f"‚ùå C·∫£nh gi·ªõi c·ªßa b·∫°n qu√° cao so v·ªõi {target.display_name}. Kh√¥ng th·ªÉ khi√™u chi·∫øn!")
                    else:
                        await ctx.send(
                            f"‚ùå C·∫£nh gi·ªõi c·ªßa b·∫°n qu√° th·∫•p so v·ªõi {target.display_name}. Kh√¥ng th·ªÉ khi√™u chi·∫øn!")
                    ctx.command.reset_cooldown(ctx)
                    return

                # X√≥a th√¥ng b√°o ƒëang t·∫£i
                await loading_msg.delete()

                # Th√¥ng b√°o b·∫Øt ƒë·∫ßu chi·∫øn ƒë·∫•u
                battle_msg = await ctx.send(
                    f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang khi√™u chi·∫øn **{target.display_name}**!\n"
                    f"Tr·∫≠n ƒë·∫•u s·∫Ω b·∫Øt ƒë·∫ßu sau 3 gi√¢y..."
                )

                # Hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c
                for i in range(3, 0, -1):
                    await asyncio.sleep(1)
                    await battle_msg.edit(
                        content=f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang khi√™u chi·∫øn **{target.display_name}**!\n"
                                f"Tr·∫≠n ƒë·∫•u s·∫Ω b·∫Øt ƒë·∫ßu sau {i} gi√¢y...")

                # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω combat
                await battle_msg.edit(
                    content=f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang chi·∫øn ƒë·∫•u v·ªõi **{target.display_name}**!")

                # T·∫°o tr·∫≠n ƒë·∫•u turn-based
                winner, loser, exp_gained, combat_log = await self.process_combat(ctx.author, target, attacker,
                                                                                  defender)

                # T·∫°o embed k·∫øt qu·∫£
                embed = await self.create_combat_result_embed(
                    ctx.author, target, attacker, defender,
                    winner, loser, exp_gained, combat_log
                )

                await ctx.send(embed=embed)

                # C·∫≠p nh·∫≠t th·ªùi gian cooldown
                await self.db.update_player(
                    ctx.author.id,
                    last_combat=now
                )

                # Log l·∫°i tr·∫≠n ƒë·∫•u
                await self.log_combat(ctx.author.id, target.id, winner.id == ctx.author.id, exp_gained)

                # Ki·ªÉm tra thƒÉng c·∫•p
                if winner.id == ctx.author.id and exp_gained > 0:
                    cultivation_cog = self.bot.get_cog('Cultivation')
                    if cultivation_cog:
                        await cultivation_cog.check_level_up(ctx, attacker['level'], attacker['exp'] + exp_gained)

            except Exception as e:
                print(f"L·ªói trong combat: {e}")
                await ctx.send("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh chi·∫øn ƒë·∫•u!")
                ctx.command.reset_cooldown(ctx)

    @commands.command(name="tudo", aliases=["friendly", "duel", "thachdau"], usage="@ng∆∞·ªùi_ch∆°i")
    @commands.guild_only()
    async def friendly_duel(self, ctx, target: discord.Member = None):
        """Th√°ch ƒë·∫•u t·ª± do v·ªõi ng∆∞·ªùi ch∆°i kh√°c (kh√¥ng c∆∞·ªõp exp)"""
        if not target:
            await ctx.send("S·ª≠ d·ª•ng: !tudo @ng∆∞·ªùi_ch∆°i")
            return

        # Ki·ªÉm tra self-duel
        if target.id == ctx.author.id:
            await ctx.send("Kh√¥ng th·ªÉ t·ª± th√°ch ƒë·∫•u ch√≠nh m√¨nh!")
            return

        # Ki·ªÉm tra ƒë√°nh bot
        if target.bot:
            await ctx.send("Kh√¥ng th·ªÉ th√°ch ƒë·∫•u bot! Ch·ªçn m·ªôt ng∆∞·ªùi ch∆°i th·∫≠t.")
            return

        # Ki·ªÉm tra xem ƒë√£ c√≥ l·ªùi m·ªùi th√°ch ƒë·∫•u ch∆∞a
        duel_key = f"{ctx.author.id}_{target.id}"
        if duel_key in self.active_duels:
            await ctx.send(f"B·∫°n ƒë√£ g·ª≠i l·ªùi th√°ch ƒë·∫•u cho {target.display_name} r·ªìi! Vui l√≤ng ƒë·ª£i ph·∫£n h·ªìi.")
            return

        # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
        attacker = await self.db.get_player(ctx.author.id)
        defender = await self.db.get_player(target.id)

        if not attacker:
            await ctx.send(
                f"{ctx.author.mention}, b·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! H√£y s·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i.")
            return

        if not defender:
            await ctx.send(f"{target.mention} ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán!")
            return

        # Ki·ªÉm tra HP (n·∫øu c√≥ h·ªá th·ªëng HP)
        if attacker.get('hp', 100) <= 0:
            await ctx.send(
                f"{ctx.author.mention}, b·∫°n ƒëang b·ªã th∆∞∆°ng n·∫∑ng, kh√¥ng th·ªÉ chi·∫øn ƒë·∫•u! H√£y h·ªìi ph·ª•c tr∆∞·ªõc.")
            return

        if defender.get('hp', 100) <= 0:
            await ctx.send(f"{target.mention} ƒëang b·ªã th∆∞∆°ng n·∫∑ng, kh√¥ng th·ªÉ chi·∫øn ƒë·∫•u!")
            return

        # T·∫°o embed l·ªùi m·ªùi th√°ch ƒë·∫•u
        embed = discord.Embed(
            title="ü§∫ L·ªùi Th√°ch ƒê·∫•u",
            description=f"{ctx.author.mention} ƒë√£ th√°ch ƒë·∫•u {target.mention} m·ªôt tr·∫≠n ƒë·∫•u t·ª± do!",
            color=0x3498db
        )

        embed.add_field(
            name="üìù Th√¥ng Tin",
            value=(
                "‚Ä¢ ƒê√¢y l√† tr·∫≠n ƒë·∫•u t·ª± do, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn EXP\n"
                "‚Ä¢ Kh√¥ng c√≥ cooldown sau khi ƒë·∫•u\n"
                "‚Ä¢ K·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t giao l∆∞u"
            ),
            inline=False
        )

        # T·∫°o view v·ªõi c√°c n√∫t ch·∫•p nh·∫≠n/t·ª´ ch·ªëi
        class DuelView(discord.ui.View):
            def __init__(self, cog):
                super().__init__(timeout=60)  # Timeout sau 60 gi√¢y
                self.cog = cog
                self.value = None

            @discord.ui.button(label="Ch·∫•p Nh·∫≠n", style=discord.ButtonStyle.green)
            async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
                if interaction.user.id != target.id:
                    await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
                    return

                await interaction.response.defer()
                self.value = True
                self.stop()

            @discord.ui.button(label="T·ª´ Ch·ªëi", style=discord.ButtonStyle.red)
            async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
                if interaction.user.id != target.id:
                    await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
                    return

                await interaction.response.defer()
                self.value = False
                self.stop()

        # G·ª≠i l·ªùi m·ªùi v√† ƒë·ª£i ph·∫£n h·ªìi
        view = DuelView(self)
        message = await ctx.send(embed=embed, view=view)

        # L∆∞u l·ªùi m·ªùi v√†o active_duels
        self.active_duels[duel_key] = {
            "message_id": message.id,
            "channel_id": ctx.channel.id,
            "timestamp": datetime.now()
        }

        # ƒê·ª£i ph·∫£n h·ªìi
        await view.wait()

        # X√≥a l·ªùi m·ªùi kh·ªèi active_duels
        if duel_key in self.active_duels:
            del self.active_duels[duel_key]

        # X·ª≠ l√Ω k·∫øt qu·∫£
        if view.value is None:
            await message.edit(content="‚è±Ô∏è L·ªùi th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n!", embed=None, view=None)
            return
        elif view.value is False:
            await message.edit(content=f"‚ùå {target.display_name} ƒë√£ t·ª´ ch·ªëi l·ªùi th√°ch ƒë·∫•u!", embed=None, view=None)
            return

        # B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u t·ª± do
        await message.edit(content=f"‚öîÔ∏è {target.display_name} ƒë√£ ch·∫•p nh·∫≠n l·ªùi th√°ch ƒë·∫•u!", embed=None, view=None)

        # Th√¥ng b√°o b·∫Øt ƒë·∫ßu chi·∫øn ƒë·∫•u
        battle_msg = await ctx.send(
            f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang chi·∫øn ƒë·∫•u v·ªõi **{target.display_name}**!\n"
            f"Tr·∫≠n ƒë·∫•u s·∫Ω b·∫Øt ƒë·∫ßu sau 3 gi√¢y..."
        )

        # Hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c
        for i in range(3, 0, -1):
            await asyncio.sleep(1)
            await battle_msg.edit(
                content=f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang chi·∫øn ƒë·∫•u v·ªõi **{target.display_name}**!\n"
                        f"Tr·∫≠n ƒë·∫•u s·∫Ω b·∫Øt ƒë·∫ßu sau {i} gi√¢y...")

        # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω combat
        await battle_msg.edit(
            content=f"‚öîÔ∏è **{ctx.author.display_name}** ƒëang chi·∫øn ƒë·∫•u v·ªõi **{target.display_name}**!")

        # T·∫°o tr·∫≠n ƒë·∫•u turn-based (kh√¥ng c∆∞·ªõp exp)
        winner, loser, _, combat_log = await self.process_friendly_combat(ctx.author, target, attacker, defender)

        # T·∫°o embed k·∫øt qu·∫£
        embed = await self.create_friendly_combat_result_embed(
            ctx.author, target, attacker, defender,
            winner, loser, combat_log
        )

        await ctx.send(embed=embed)

        # Log l·∫°i tr·∫≠n ƒë·∫•u t·ª± do
        await self.log_combat(ctx.author.id, target.id, winner.id == ctx.author.id, 0, friendly=True)

    async def process_combat(
            self,
            attacker_user: discord.Member,
            defender_user: discord.Member,
            attacker_data: Dict[str, Any],
            defender_data: Dict[str, Any]
    ) -> Tuple[discord.Member, discord.Member, int, List[str]]:
        """X·ª≠ l√Ω qu√° tr√¨nh chi·∫øn ƒë·∫•u v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        # Kh·ªüi t·∫°o th√¥ng s·ªë chi·∫øn ƒë·∫•u
        attacker_hp = attacker_data.get('hp', 100)
        defender_hp = defender_data.get('hp', 100)

        # T√≠nh to√°n s·ª©c m·∫°nh c√≥ √°p d·ª•ng bonus t·ª´ m√¥n ph√°i
        attacker_atk, attacker_def = self.calculate_combat_stats(attacker_data)
        defender_atk, defender_def = self.calculate_combat_stats(defender_data)

        # L·∫•y gi√° tr·ªã t·ª´ config ho·∫∑c m·∫∑c ƒë·ªãnh
        exp_steal_percent = EXP_STEAL_PERCENT if 'EXP_STEAL_PERCENT' in globals() else self.default_exp_steal
        damage_variation = DAMAGE_VARIATION if 'DAMAGE_VARIATION' in globals() else self.default_damage_variation
        max_exp_steal = MAX_EXP_STEAL if 'MAX_EXP_STEAL' in globals() else self.default_max_exp_steal

        # Ghi l·∫°i log chi·∫øn ƒë·∫•u
        combat_log = []

        # L·∫•y k·ªπ nƒÉng c·ªßa ng∆∞·ªùi ch∆°i d·ª±a tr√™n c·∫£nh gi·ªõi
        attacker_skills = self.get_skills_by_level(attacker_data.get('level', 'Ph√†m Nh√¢n'))
        defender_skills = self.get_skills_by_level(defender_data.get('level', 'Ph√†m Nh√¢n'))

        # V√≤ng l·∫∑p chi·∫øn ƒë·∫•u
        turn = 0
        max_turns = 10  # Gi·ªõi h·∫°n s·ªë turn ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n

        while attacker_hp > 0 and defender_hp > 0 and turn < max_turns:
            turn += 1

            # Ng∆∞·ªùi t·∫•n c√¥ng ƒë√°nh tr∆∞·ªõc
            # Ki·ªÉm tra n√© tr√°nh
            if random.random() < 0.1:  # 10% c∆° h·ªôi n√© tr√°nh
                dodge_msg = random.choice(self.dodge_messages)
                combat_log.append(dodge_msg.format(
                    attacker=attacker_user.display_name,
                    defender=defender_user.display_name
                ))
            else:
                # Ki·ªÉm tra ƒë√≤n ch√≠ m·∫°ng
                is_crit = random.random() < 0.15  # 15% c∆° h·ªôi ch√≠ m·∫°ng

                # Ch·ªçn k·ªπ nƒÉng ng·∫´u nhi√™n
                skill = random.choice(attacker_skills)

                # T√≠nh s√°t th∆∞∆°ng
                damage_multiplier = 1.5 if is_crit else 1.0 + random.uniform(-damage_variation, damage_variation)
                damage = int(self.calculate_damage(attacker_atk, defender_def) * damage_multiplier)
                defender_hp -= damage

                # Th√™m log chi·∫øn ƒë·∫•u
                if is_crit:
                    msg = random.choice(self.critical_messages)
                else:
                    msg = random.choice(self.attack_messages)

                combat_log.append(msg.format(
                    attacker=attacker_user.display_name,
                    defender=defender_user.display_name,
                    damage=damage,
                    skill=skill
                ))

            # Ki·ªÉm tra HP
            if defender_hp <= 0:
                # T√≠nh exp c∆∞·ªõp ƒë∆∞·ª£c
                exp_gained = int(defender_data['exp'] * exp_steal_percent)
                exp_gained = min(exp_gained, max_exp_steal)  # Gi·ªõi h·∫°n exp c∆∞·ªõp ƒë∆∞·ª£c

                # Th√¥ng b√°o chi·∫øn th·∫Øng
                victory_msg = random.choice(self.victory_messages)
                combat_log.append(victory_msg.format(
                    winner=attacker_user.display_name,
                    loser=defender_user.display_name,
                    exp=exp_gained
                ))

                # C·∫≠p nh·∫≠t exp cho ng∆∞·ªùi th·∫Øng v√† ng∆∞·ªùi thua
                await self.db.update_player(
                    attacker_user.id,
                    exp=attacker_data['exp'] + exp_gained,
                    stats__pvp_wins=(attacker_data.get('stats', {}).get('pvp_wins', 0) + 1)
                )

                await self.db.update_player(
                    defender_user.id,
                    exp=max(0, defender_data['exp'] - exp_gained),
                    stats__pvp_losses=(defender_data.get('stats', {}).get('pvp_losses', 0) + 1)
                )

                return attacker_user, defender_user, exp_gained, combat_log

            # Ng∆∞·ªùi ph√≤ng th·ªß ƒë√°nh l·∫°i
            # Ki·ªÉm tra n√© tr√°nh
            if random.random() < 0.1:  # 10% c∆° h·ªôi n√© tr√°nh
                dodge_msg = random.choice(self.dodge_messages)
                combat_log.append(dodge_msg.format(
                    attacker=defender_user.display_name,
                    defender=attacker_user.display_name
                ))
            else:
                # Ki·ªÉm tra ƒë√≤n ch√≠ m·∫°ng
                is_crit = random.random() < 0.15  # 15% c∆° h·ªôi ch√≠ m·∫°ng

                # Ch·ªçn k·ªπ nƒÉng ng·∫´u nhi√™n
                skill = random.choice(defender_skills)

                # T√≠nh s√°t th∆∞∆°ng
                damage_multiplier = 1.5 if is_crit else 1.0 + random.uniform(-damage_variation, damage_variation)
                damage = int(self.calculate_damage(defender_atk, attacker_def) * damage_multiplier)
                attacker_hp -= damage

                # Th√™m log chi·∫øn ƒë·∫•u
                if is_crit:
                    msg = random.choice(self.critical_messages)
                else:
                    msg = random.choice(self.attack_messages)

                combat_log.append(msg.format(
                    attacker=defender_user.display_name,
                    defender=attacker_user.display_name,
                    damage=damage,
                    skill=skill
                ))

            # Ki·ªÉm tra HP
            if attacker_hp <= 0:
                # Ng∆∞·ªùi ph√≤ng th·ªß th·∫Øng - kh√¥ng c∆∞·ªõp exp
                combat_log.append(f"üõ°Ô∏è {defender_user.display_name} ƒë√£ th√†nh c√¥ng ph√≤ng th·ªß!")

                # C·∫≠p nh·∫≠t th·ªëng k√™
                await self.db.update_player(
                    attacker_user.id,
                    stats__pvp_losses=(attacker_data.get('stats', {}).get('pvp_losses', 0) + 1)
                )

                await self.db.update_player(
                    defender_user.id,
                    stats__pvp_wins=(defender_data.get('stats', {}).get('pvp_wins', 0) + 1)
                )

                return defender_user, attacker_user, 0, combat_log

        # N·∫øu ƒë·∫°t max turn m√† ch∆∞a c√≥ k·∫øt qu·∫£, ng∆∞·ªùi c√≥ HP cao h∆°n th·∫Øng
        if attacker_hp > defender_hp:
            exp_gained = int(defender_data[
                                 'exp'] * exp_steal_percent * 0.5)  # Ch·ªâ c∆∞·ªõp 50% b√¨nh th∆∞·ªùng v√¨ kh√¥ng chi·∫øn th·∫Øng ho√†n to√†n
            exp_gained = min(exp_gained, max_exp_steal)  # Gi·ªõi h·∫°n exp c∆∞·ªõp ƒë∆∞·ª£c
            combat_log.append(f"üèÜ {attacker_user.display_name} th·∫Øng v·ªõi HP cao h∆°n!")

            await self.db.update_player(
                attacker_user.id,
                exp=attacker_data['exp'] + exp_gained,
                stats__pvp_wins=(attacker_data.get('stats', {}).get('pvp_wins', 0) + 1)
            )

            await self.db.update_player(
                defender_user.id,
                exp=max(0, defender_data['exp'] - exp_gained),
                stats__pvp_losses=(defender_data.get('stats', {}).get('pvp_losses', 0) + 1)
            )

            return attacker_user, defender_user, exp_gained, combat_log
        else:
            combat_log.append(f"üõ°Ô∏è {defender_user.display_name} th·∫Øng v·ªõi HP cao h∆°n!")

            await self.db.update_player(
                attacker_user.id,
                stats__pvp_losses=(attacker_data.get('stats', {}).get('pvp_losses', 0) + 1)
            )

            await self.db.update_player(
                defender_user.id,
                stats__pvp_wins=(defender_data.get('stats', {}).get('pvp_wins', 0) + 1)
            )

            return defender_user, attacker_user, 0, combat_log

    async def process_friendly_combat(
            self,
            attacker_user: discord.Member,
            defender_user: discord.Member,
            attacker_data: Dict[str, Any],
            defender_data: Dict[str, Any]
    ) -> Tuple[discord.Member, discord.Member, int, List[str]]:
        """X·ª≠ l√Ω qu√° tr√¨nh chi·∫øn ƒë·∫•u t·ª± do (kh√¥ng c∆∞·ªõp exp)"""
        # Kh·ªüi t·∫°o th√¥ng s·ªë chi·∫øn ƒë·∫•u
        attacker_hp = attacker_data.get('hp', 100)
        defender_hp = defender_data.get('hp', 100)

        # T√≠nh to√°n s·ª©c m·∫°nh c√≥ √°p d·ª•ng bonus t·ª´ m√¥n ph√°i
        attacker_atk, attacker_def = self.calculate_combat_stats(attacker_data)
        defender_atk, defender_def = self.calculate_combat_stats(defender_data)

        # L·∫•y gi√° tr·ªã t·ª´ config ho·∫∑c m·∫∑c ƒë·ªãnh
        damage_variation = DAMAGE_VARIATION if 'DAMAGE_VARIATION' in globals() else self.default_damage_variation

        # Ghi l·∫°i log chi·∫øn ƒë·∫•u
        combat_log = []

        # L·∫•y k·ªπ nƒÉng c·ªßa ng∆∞·ªùi ch∆°i d·ª±a tr√™n c·∫£nh gi·ªõi
        attacker_skills = self.get_skills_by_level(attacker_data.get('level', 'Ph√†m Nh√¢n'))
        defender_skills = self.get_skills_by_level(defender_data.get('level', 'Ph√†m Nh√¢n'))

        # V√≤ng l·∫∑p chi·∫øn ƒë·∫•u
        turn = 0
        max_turns = 15  # TƒÉng s·ªë turn cho tr·∫≠n ƒë·∫•u t·ª± do

        while attacker_hp > 0 and defender_hp > 0 and turn < max_turns:
            turn += 1

            # Ng∆∞·ªùi t·∫•n c√¥ng ƒë√°nh tr∆∞·ªõc
            # Ki·ªÉm tra n√© tr√°nh
            if random.random() < 0.1:  # 10% c∆° h·ªôi n√© tr√°nh
                dodge_msg = random.choice(self.dodge_messages)
                combat_log.append(dodge_msg.format(
                    attacker=attacker_user.display_name,
                    defender=defender_user.display_name
                ))
            else:
                # Ki·ªÉm tra ƒë√≤n ch√≠ m·∫°ng
                is_crit = random.random() < 0.15  # 15% c∆° h·ªôi ch√≠ m·∫°ng

                # Ch·ªçn k·ªπ nƒÉng ng·∫´u nhi√™n
                skill = random.choice(attacker_skills)

                # T√≠nh s√°t th∆∞∆°ng
                damage_multiplier = 1.5 if is_crit else 1.0 + random.uniform(-damage_variation, damage_variation)
                damage = int(self.calculate_damage(attacker_atk, defender_def) * damage_multiplier)
                defender_hp -= damage

                # Th√™m log chi·∫øn ƒë·∫•u
                if is_crit:
                    msg = random.choice(self.critical_messages)
                else:
                    msg = random.choice(self.attack_messages)

                combat_log.append(msg.format(
                    attacker=attacker_user.display_name,
                    defender=defender_user.display_name,
                    damage=damage,
                    skill=skill
                ))

            # Ki·ªÉm tra HP
            if defender_hp <= 0:
                combat_log.append(f"üèÜ {attacker_user.display_name} ƒë√£ chi·∫øn th·∫Øng trong tr·∫≠n ƒë·∫•u t·ª± do!")

                # Kh√¥ng c·∫≠p nh·∫≠t exp, ch·ªâ c·∫≠p nh·∫≠t th·ªëng k√™
                await self.db.update_player(
                    attacker_user.id,
                    stats__friendly_wins=(attacker_data.get('stats', {}).get('friendly_wins', 0) + 1)
                )

                await self.db.update_player(
                    defender_user.id,
                    stats__friendly_losses=(defender_data.get('stats', {}).get('friendly_losses', 0) + 1)
                )

                return attacker_user, defender_user, 0, combat_log

            # Ng∆∞·ªùi ph√≤ng th·ªß ƒë√°nh l·∫°i
            # Ki·ªÉm tra n√© tr√°nh
            if random.random() < 0.1:  # 10% c∆° h·ªôi n√© tr√°nh
                dodge_msg = random.choice(self.dodge_messages)
                combat_log.append(dodge_msg.format(
                    attacker=defender_user.display_name,
                    defender=attacker_user.display_name
                ))
            else:
                # Ki·ªÉm tra ƒë√≤n ch√≠ m·∫°ng
                is_crit = random.random() < 0.15  # 15% c∆° h·ªôi ch√≠ m·∫°ng

                # Ch·ªçn k·ªπ nƒÉng ng·∫´u nhi√™n
                skill = random.choice(defender_skills)

                # T√≠nh s√°t th∆∞∆°ng
                damage_multiplier = 1.5 if is_crit else 1.0 + random.uniform(-damage_variation, damage_variation)
                damage = int(self.calculate_damage(defender_atk, attacker_def) * damage_multiplier)
                attacker_hp -= damage

                # Th√™m log chi·∫øn ƒë·∫•u
                if is_crit:
                    msg = random.choice(self.critical_messages)
                else:
                    msg = random.choice(self.attack_messages)

                combat_log.append(msg.format(
                    attacker=defender_user.display_name,
                    defender=attacker_user.display_name,
                    damage=damage,
                    skill=skill
                ))

            # Ki·ªÉm tra HP
            if attacker_hp <= 0:
                combat_log.append(f"üèÜ {defender_user.display_name} ƒë√£ chi·∫øn th·∫Øng trong tr·∫≠n ƒë·∫•u t·ª± do!")

                # Kh√¥ng c·∫≠p nh·∫≠t exp, ch·ªâ c·∫≠p nh·∫≠t th·ªëng k√™
                await self.db.update_player(
                    attacker_user.id,
                    stats__friendly_losses=(attacker_data.get('stats', {}).get('friendly_losses', 0) + 1)
                )

                await self.db.update_player(
                    defender_user.id,
                    stats__friendly_wins=(defender_data.get('stats', {}).get('friendly_wins', 0) + 1)
                )

                return defender_user, attacker_user, 0, combat_log

        # N·∫øu ƒë·∫°t max turn m√† ch∆∞a c√≥ k·∫øt qu·∫£, ng∆∞·ªùi c√≥ HP cao h∆°n th·∫Øng
        if attacker_hp > defender_hp:
            combat_log.append(f"üèÜ {attacker_user.display_name} th·∫Øng v·ªõi HP cao h∆°n trong tr·∫≠n ƒë·∫•u t·ª± do!")

            # Kh√¥ng c·∫≠p nh·∫≠t exp, ch·ªâ c·∫≠p nh·∫≠t th·ªëng k√™
            await self.db.update_player(
                attacker_user.id,
                stats__friendly_wins=(attacker_data.get('stats', {}).get('friendly_wins', 0) + 1)
            )

            await self.db.update_player(
                defender_user.id,
                stats__friendly_losses=(defender_data.get('stats', {}).get('friendly_losses', 0) + 1)
            )

            return attacker_user, defender_user, 0, combat_log
        else:
            combat_log.append(f"üèÜ {defender_user.display_name} th·∫Øng v·ªõi HP cao h∆°n trong tr·∫≠n ƒë·∫•u t·ª± do!")

            # Kh√¥ng c·∫≠p nh·∫≠t exp, ch·ªâ c·∫≠p nh·∫≠t th·ªëng k√™
            await self.db.update_player(
                attacker_user.id,
                stats__friendly_losses=(attacker_data.get('stats', {}).get('friendly_losses', 0) + 1)
            )

            await self.db.update_player(
                defender_user.id,
                stats__friendly_wins=(defender_data.get('stats', {}).get('friendly_wins', 0) + 1)
            )

            return defender_user, attacker_user, 0, combat_log

    def calculate_combat_stats(self, player_data: Dict[str, Any]) -> Tuple[int, int]:
        """T√≠nh to√°n s·ª©c c√¥ng k√≠ch v√† ph√≤ng th·ªß c√≥ √°p d·ª•ng bonus t·ª´ m√¥n ph√°i"""
        # L·∫•y ch·ªâ s·ªë c∆° b·∫£n
        attack = player_data.get('attack', 10)
        defense = player_data.get('defense', 5)

        # L·∫•y t√¥ng m√¥n v√† √°p d·ª•ng bonus
        sect = player_data.get('sect')
        if sect and sect in SECTS:
            attack_bonus = SECTS[sect].get('attack_bonus', 1.0)
            defense_bonus = SECTS[sect].get('defense_bonus', 1.0)

            attack = int(attack * attack_bonus)
            defense = int(defense * defense_bonus)

        return attack, defense

    def calculate_damage(self, attack: int, defense: int, variation: float = 0.2) -> int:
        """T√≠nh to√°n s√°t th∆∞∆°ng v·ªõi y·∫øu t·ªë ng·∫´u nhi√™n"""
        # C√¥ng th·ª©c c∆° b·∫£n: damage = attack - defense/2
        base_damage = max(1, attack - defense // 2)

        # Th√™m y·∫øu t·ªë ng·∫´u nhi√™n (m·∫∑c ƒë·ªãnh ¬±20%)
        variation_multiplier = 1.0 + random.uniform(-variation, variation)
        damage = max(1, int(base_damage * variation_multiplier))

        return damage

    def get_skills_by_level(self, level: str) -> List[str]:
        """L·∫•y danh s√°ch k·ªπ nƒÉng d·ª±a tr√™n c·∫£nh gi·ªõi"""
        # K·ªπ nƒÉng c∆° b·∫£n
        basic_skills = ["Quy·ªÅn C∆∞·ªõc", "Ki·∫øm Ph√°p C∆° B·∫£n", "Ch∆∞·ªüng Ph√°p"]

        # K·ªπ nƒÉng theo c·∫£nh gi·ªõi
        if "Luy·ªán Kh√≠" in level:
            return basic_skills + ["Linh Kh√≠ Quy·ªÅn", "Ng∆∞ng Kh√≠ Thu·∫≠t"]
        elif "Tr√∫c C∆°" in level:
            return basic_skills + ["Linh Kh√≠ Quy·ªÅn", "Ng∆∞ng Kh√≠ Thu·∫≠t", "Tr√∫c C∆° Ki·∫øm Ph√°p", "Linh Kh√≠ Ph√°"]
        elif "Nguy√™n Anh" in level:
            return basic_skills + ["Tr√∫c C∆° Ki·∫øm Ph√°p", "Linh Kh√≠ Ph√°", "Nguy√™n Anh Ch∆∞·ªüng", "Thi√™n ƒê·ªãa H·ª£p Nh·∫•t"]
        elif "Kim ƒêan" in level or self.higher_level(level):
            return ["Linh Kh√≠ Ph√°", "Nguy√™n Anh Ch∆∞·ªüng", "Thi√™n ƒê·ªãa H·ª£p Nh·∫•t", "Ki·∫øm Kh√≠ Tr·∫£m", "ƒê·∫°i ƒê·∫°o V√¥ H√¨nh",
                    "Ti√™n Thi√™n C√¥ng"]
        else:
            return basic_skills

    def higher_level(self, level: str) -> bool:
        """Ki·ªÉm tra xem c·∫£nh gi·ªõi c√≥ cao h∆°n Kim ƒêan kh√¥ng"""
        high_levels = ["H√≥a Th·∫ßn", "Luy·ªán H∆∞", "ƒê·∫°i Th·ª´a", "Di·ªÖn Ch·ªß"]
        return any(high in level for high in high_levels)

    def get_level_index(self, level: str) -> int:
        """L·∫•y ch·ªâ s·ªë c·ªßa c·∫£nh gi·ªõi trong danh s√°ch c·∫£nh gi·ªõi"""
        cultivation_cog = self.bot.get_cog('Cultivation')
        if cultivation_cog and hasattr(cultivation_cog, 'CULTIVATION_RANKS'):
            try:
                return cultivation_cog.CULTIVATION_RANKS.index(level)
            except ValueError:
                return 0

        # Fallback n·∫øu kh√¥ng t√¨m th·∫•y Cultivation cog
        levels = [
            "Ph√†m Nh√¢n",
            "Luy·ªán Kh√≠ T·∫ßng 1", "Luy·ªán Kh√≠ T·∫ßng 2", "Luy·ªán Kh√≠ T·∫ßng 3",
            "Luy·ªán Kh√≠ T·∫ßng 4", "Luy·ªán Kh√≠ T·∫ßng 5", "Luy·ªán Kh√≠ T·∫ßng 6",
            "Luy·ªán Kh√≠ T·∫ßng 7", "Luy·ªán Kh√≠ T·∫ßng 8", "Luy·ªán Kh√≠ T·∫ßng 9",
            "Tr√∫c C∆° S∆° K·ª≥", "Tr√∫c C∆° Trung K·ª≥", "Tr√∫c C∆° ƒê·∫°i Vi√™n M√£n",
            "Nguy√™n Anh S∆° K·ª≥", "Nguy√™n Anh Trung K·ª≥", "Nguy√™n Anh ƒê·∫°i Vi√™n M√£n",
            "Kim ƒêan S∆° K·ª≥", "Kim ƒêan Trung K·ª≥", "Kim ƒêan ƒê·∫°i Vi√™n M√£n"
        ]
        try:
            return levels.index(level)
        except ValueError:
            return 0

    async def create_combat_result_embed(
            self,
            attacker_user: discord.Member,
            defender_user: discord.Member,
            attacker_data: Dict[str, Any],
            defender_data: Dict[str, Any],
            winner: discord.Member,
            loser: discord.Member,
            exp_gained: int,
            combat_log: list
    ) -> discord.Embed:
        """T·∫°o embed hi·ªÉn th·ªã k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u"""
        # M√†u s·∫Øc d·ª±a tr√™n k·∫øt qu·∫£
        if winner.id == attacker_user.id:
            color = 0x3498db  # Xanh d∆∞∆°ng - ng∆∞·ªùi t·∫•n c√¥ng th·∫Øng
        else:
            color = 0xe74c3c  # ƒê·ªè - ng∆∞·ªùi ph√≤ng th·ªß th·∫Øng

        # T·∫°o embed k·∫øt qu·∫£
        embed = discord.Embed(
            title="‚öîÔ∏è K·∫øt Qu·∫£ Chi·∫øn ƒê·∫•u Tu Ti√™n",
            description=f"Tr·∫≠n ƒë·∫•u gi·ªØa {attacker_user.mention} v√† {defender_user.mention} ƒë√£ k·∫øt th√∫c!",
            color=color,
            timestamp=datetime.now()
        )

        # Th√¥ng tin ng∆∞·ªùi t·∫•n c√¥ng
        attacker_atk, attacker_def = self.calculate_combat_stats(attacker_data)
        attacker_sect = attacker_data.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
        attacker_emoji = SECT_EMOJIS.get(attacker_sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

        embed.add_field(
            name=f"{attacker_emoji} {attacker_user.display_name}",
            value=(
                f"C·∫£nh Gi·ªõi: {attacker_data['level']}\n"
                f"M√¥n Ph√°i: {attacker_sect}\n"
                f"C√¥ng K√≠ch: {attacker_atk} ({attacker_data['attack']} + bonus)\n"
                f"Ph√≤ng Th·ªß: {attacker_def} ({attacker_data['defense']} + bonus)"
            ),
            inline=True
        )

        # Th√¥ng tin ng∆∞·ªùi ph√≤ng th·ªß
        defender_atk, defender_def = self.calculate_combat_stats(defender_data)
        defender_sect = defender_data.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
        defender_emoji = SECT_EMOJIS.get(defender_sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

        embed.add_field(
            name=f"{defender_emoji} {defender_user.display_name}",
            value=(
                f"C·∫£nh Gi·ªõi: {defender_data['level']}\n"
                f"M√¥n Ph√°i: {defender_sect}\n"
                f"C√¥ng K√≠ch: {defender_atk} ({defender_data['attack']} + bonus)\n"
                f"Ph√≤ng Th·ªß: {defender_def} ({defender_data['defense']} + bonus)"
            ),
            inline=True
        )

        # K·∫øt qu·∫£ tr·∫≠n ƒë·∫•u
        winner_symbol = "üèÜ" if winner.id == attacker_user.id else "üõ°Ô∏è"

        if exp_gained > 0:
            result_text = (
                f"{winner_symbol} **{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng!\n"
                f"C∆∞·ªõp ƒë∆∞·ª£c {exp_gained:,} exp ({int(EXP_STEAL_PERCENT * 100)}% exp c·ªßa ƒë·ªëi th·ªß)"
            )
        else:
            result_text = f"{winner_symbol} **{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng!"

        embed.add_field(
            name="üìä K·∫øt Qu·∫£",
            value=result_text,
            inline=False
        )

        # T√≥m t·∫Øt chi·∫øn ƒë·∫•u
        if len(combat_log) > 5:
            # Ch·ªâ hi·ªÉn th·ªã 5 d√≤ng log quan tr·ªçng nh·∫•t n·∫øu qu√° d√†i
            summary_log = "\n".join(combat_log[:2] + ["..."] + combat_log[-2:])
        else:
            summary_log = "\n".join(combat_log)

        embed.add_field(
            name="üóíÔ∏è Di·ªÖn Bi·∫øn Chi·∫øn ƒê·∫•u",
            value=f"```\n{summary_log}\n```",
            inline=False
        )

        # Th√™m th√¥ng tin b·ªï sung
        embed.set_footer(text=f"Tu Ti√™n PvP ‚Ä¢ Cooldown: {format_time(COMBAT_COOLDOWN)}")

        # Th√™m ·∫£nh ƒë·∫°i di·ªán ng∆∞·ªùi th·∫Øng
        if winner.avatar:
            embed.set_thumbnail(url=winner.avatar.url)

        return embed

    async def create_friendly_combat_result_embed(
            self,
            attacker_user: discord.Member,
            defender_user: discord.Member,
            attacker_data: Dict[str, Any],
            defender_data: Dict[str, Any],
            winner: discord.Member,
            loser: discord.Member,
            combat_log: list
    ) -> discord.Embed:
        """T·∫°o embed hi·ªÉn th·ªã k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u t·ª± do"""
        # M√†u s·∫Øc d·ª±a tr√™n k·∫øt qu·∫£
        if winner.id == attacker_user.id:
            color = 0x3498db  # Xanh d∆∞∆°ng - ng∆∞·ªùi t·∫•n c√¥ng th·∫Øng
        else:
            color = 0xe74c3c  # ƒê·ªè - ng∆∞·ªùi ph√≤ng th·ªß th·∫Øng

        # T·∫°o embed k·∫øt qu·∫£
        embed = discord.Embed(
            title="ü§∫ K·∫øt Qu·∫£ ƒê·∫•u T·ª± Do",
            description=f"Tr·∫≠n ƒë·∫•u t·ª± do gi·ªØa {attacker_user.mention} v√† {defender_user.mention} ƒë√£ k·∫øt th√∫c!",
            color=color,
            timestamp=datetime.now()
        )

        # Th√¥ng tin ng∆∞·ªùi t·∫•n c√¥ng
        attacker_atk, attacker_def = self.calculate_combat_stats(attacker_data)
        attacker_sect = attacker_data.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
        attacker_emoji = SECT_EMOJIS.get(attacker_sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

        embed.add_field(
            name=f"{attacker_emoji} {attacker_user.display_name}",
            value=(
                f"C·∫£nh Gi·ªõi: {attacker_data['level']}\n"
                f"M√¥n Ph√°i: {attacker_sect}\n"
                f"C√¥ng K√≠ch: {attacker_atk} ({attacker_data['attack']} + bonus)\n"
                f"Ph√≤ng Th·ªß: {attacker_def} ({attacker_data['defense']} + bonus)"
            ),
            inline=True
        )

        # Th√¥ng tin ng∆∞·ªùi ph√≤ng th·ªß
        defender_atk, defender_def = self.calculate_combat_stats(defender_data)
        defender_sect = defender_data.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
        defender_emoji = SECT_EMOJIS.get(defender_sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

        embed.add_field(
            name=f"{defender_emoji} {defender_user.display_name}",
            value=(
                f"C·∫£nh Gi·ªõi: {defender_data['level']}\n"
                f"M√¥n Ph√°i: {defender_sect}\n"
                f"C√¥ng K√≠ch: {defender_atk} ({defender_data['attack']} + bonus)\n"
                f"Ph√≤ng Th·ªß: {defender_def} ({defender_data['defense']} + bonus)"
            ),
            inline=True
        )

        # K·∫øt qu·∫£ tr·∫≠n ƒë·∫•u
        winner_symbol = "üèÜ" if winner.id == attacker_user.id else "üõ°Ô∏è"
        result_text = f"{winner_symbol} **{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng trong tr·∫≠n ƒë·∫•u t·ª± do!"

        embed.add_field(
            name="üìä K·∫øt Qu·∫£",
            value=result_text,
            inline=False
        )

        # T√≥m t·∫Øt chi·∫øn ƒë·∫•u
        if len(combat_log) > 5:
            # Ch·ªâ hi·ªÉn th·ªã 5 d√≤ng log quan tr·ªçng nh·∫•t n·∫øu qu√° d√†i
            summary_log = "\n".join(combat_log[:2] + ["..."] + combat_log[-2:])
        else:
            summary_log = "\n".join(combat_log)

        embed.add_field(
            name="üóíÔ∏è Di·ªÖn Bi·∫øn Chi·∫øn ƒê·∫•u",
            value=f"```\n{summary_log}\n```",
            inline=False
        )

        # Th√™m th√¥ng tin b·ªï sung
        embed.add_field(
            name="üìù Ghi Ch√∫",
            value="ƒê√¢y l√† tr·∫≠n ƒë·∫•u t·ª± do, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn EXP v√† kh√¥ng c√≥ cooldown.",
            inline=False
        )

        embed.set_footer(text="Tu Ti√™n ƒê·∫•u T·ª± Do ‚Ä¢ S·ª≠ d·ª•ng !tudo @ng∆∞·ªùi_ch∆°i ƒë·ªÉ th√°ch ƒë·∫•u")

        # Th√™m ·∫£nh ƒë·∫°i di·ªán ng∆∞·ªùi th·∫Øng
        if winner.avatar:
            embed.set_thumbnail(url=winner.avatar.url)

        return embed

    async def log_combat(self, attacker_id: int, defender_id: int, attacker_won: bool, exp_gained: int,
                         friendly: bool = False):
        """Ghi l·∫°i l·ªãch s·ª≠ tr·∫≠n ƒë·∫•u v√†o database"""
        try:
            # T·∫°o d·ªØ li·ªáu tr·∫≠n ƒë·∫•u
            combat_data = {
                "attacker_id": attacker_id,
                "defender_id": defender_id,
                "result": "win" if attacker_won else "lose",
                "exp_gained": exp_gained,
                "friendly": friendly,
                "timestamp": datetime.now()
            }

            # L∆∞u v√†o database
            await self.db.add_combat_history(
                attacker_id=attacker_id,
                defender_id=defender_id,
                result="win" if attacker_won else "lose",
                exp_gained=exp_gained,
                friendly=friendly
            )

        except Exception as e:
            print(f"L·ªói khi log tr·∫≠n ƒë·∫•u: {e}")

    @commands.command(name="combatinfo", aliases=["pvpinfo", "chiendau"], usage="")
    async def combat_info(self, ctx):
        """Xem th√¥ng tin h·ªá th·ªëng chi·∫øn ƒë·∫•u PvP"""
        embed = discord.Embed(
            title="üó°Ô∏è H·ªá Th·ªëng Chi·∫øn ƒê·∫•u Tu Ti√™n",
            description="Th√¥ng tin v·ªÅ h·ªá th·ªëng PvP gi·ªØa c√°c tu sƒ©",
            color=0x9b59b6
        )

        # Quy t·∫Øc c∆° b·∫£n
        embed.add_field(
            name="üìú Quy T·∫Øc C∆° B·∫£n",
            value=(
                "‚Ä¢ S·ª≠ d·ª•ng l·ªánh `!combat @ng∆∞·ªùi_ch∆°i` ƒë·ªÉ khi√™u chi·∫øn\n"
                f"‚Ä¢ M·ªói l·∫ßn combat c·∫ßn ch·ªù {format_time(COMBAT_COOLDOWN)}\n"
                f"‚Ä¢ Ng∆∞·ªùi th·∫Øng s·∫Ω c∆∞·ªõp ƒë∆∞·ª£c {int(EXP_STEAL_PERCENT * 100)}% exp c·ªßa ng∆∞·ªùi thua (t·ªëi ƒëa {MAX_EXP_STEAL:,} exp)\n"
                "‚Ä¢ C√¥ng th·ª©c s√°t th∆∞∆°ng: C√¥ng k√≠ch - (Ph√≤ng th·ªß/2)\n"
                "‚Ä¢ S√°t th∆∞∆°ng c√≥ y·∫øu t·ªë ng·∫´u nhi√™n ¬±20%"
            ),
            inline=False
        )

        # Bonus m√¥n ph√°i
        embed.add_field(
            name="üèØ Bonus M√¥n Ph√°i",
            value=(
                    "M·ªói m√¥n ph√°i c√≥ bonus ri√™ng trong chi·∫øn ƒë·∫•u:\n" +
                    "\n".join([
                        f"‚Ä¢ {name}: C√¥ng +{int((info.get('attack_bonus', 1.0) - 1) * 100)}%, " +
                        f"Th·ªß +{int((info.get('defense_bonus', 1.0) - 1) * 100)}%"
                        for name, info in SECTS.items()
                    ])
            ),
            inline=False
        )

        # C√°c lo·∫°i tr·∫≠n ƒë·∫•u
        embed.add_field(
            name="‚öîÔ∏è C√°c Lo·∫°i Tr·∫≠n ƒê·∫•u",
            value=(
                "‚Ä¢ **PvP Th∆∞·ªùng**: `!combat @ng∆∞·ªùi_ch∆°i` - C∆∞·ªõp exp, c√≥ cooldown\n"
                "‚Ä¢ **ƒê·∫•u T·ª± Do**: `!tudo @ng∆∞·ªùi_ch∆°i` - Kh√¥ng c∆∞·ªõp exp, kh√¥ng c√≥ cooldown\n"
                "‚Ä¢ **Ch√™nh l·ªách c·∫£nh gi·ªõi**: Kh√¥ng th·ªÉ ƒë√°nh ng∆∞·ªùi ch∆°i ch√™nh l·ªách qu√° 5 c·∫£nh gi·ªõi"
            ),
            inline=False
        )

        # M·∫πo chi·∫øn ƒë·∫•u
        embed.add_field(
            name="üí° M·∫πo Chi·∫øn ƒê·∫•u",
            value=(
                "‚Ä¢ N√¢ng cao c·∫£nh gi·ªõi ƒë·ªÉ tƒÉng ch·ªâ s·ªë c∆° b·∫£n\n"
                "‚Ä¢ Ch·ªçn m√¥n ph√°i ph√π h·ª£p v·ªõi phong c√°ch chi·∫øn ƒë·∫•u\n"
                "‚Ä¢ Tu luy·ªán th∆∞·ªùng xuy√™n ƒë·ªÉ tƒÉng exp v√† s·ª©c m·∫°nh\n"
                "‚Ä¢ Chi·∫øn ƒë·∫•u v·ªõi ƒë·ªëi th·ªß c√≥ exp cao ƒë·ªÉ c∆∞·ªõp nhi·ªÅu exp h∆°n\n"
                "‚Ä¢ C√≥ 15% c∆° h·ªôi g√¢y s√°t th∆∞∆°ng ch√≠ m·∫°ng (x1.5)\n"
                "‚Ä¢ C√≥ 10% c∆° h·ªôi n√© tr√°nh ƒë√≤n t·∫•n c√¥ng"
            ),
            inline=False
        )

        await ctx.send(embed=embed)

    @commands.command(name="pvpstats", aliases=["combatstat", "chiendaustats"], usage="[@ng∆∞·ªùi_ch∆°i]")
    async def pvp_stats(self, ctx, member: discord.Member = None):
        """Xem th·ªëng k√™ chi·∫øn ƒë·∫•u PvP c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi kh√°c"""
        target = member or ctx.author

        # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
        player = await self.db.get_player(target.id)
        if not player:
            if target == ctx.author:
                await ctx.send(
                    f"{ctx.author.mention}, b·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! H√£y s·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i.")
            else:
                await ctx.send(f"{target.display_name} ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán!")
            return

        # L·∫•y th·ªëng k√™ chi·∫øn ƒë·∫•u
        stats = player.get('stats', {})
        pvp_wins = stats.get('pvp_wins', 0)
        pvp_losses = stats.get('pvp_losses', 0)
        friendly_wins = stats.get('friendly_wins', 0)
        friendly_losses = stats.get('friendly_losses', 0)

        # T√≠nh t·ª∑ l·ªá th·∫Øng
        total_pvp = pvp_wins + pvp_losses
        win_rate = (pvp_wins / total_pvp * 100) if total_pvp > 0 else 0

        total_friendly = friendly_wins + friendly_losses
        friendly_win_rate = (friendly_wins / total_friendly * 100) if total_friendly > 0 else 0

        # T·∫°o embed
        embed = discord.Embed(
            title=f"‚öîÔ∏è Th·ªëng K√™ Chi·∫øn ƒê·∫•u c·ªßa {target.display_name}",
            description=f"Th√¥ng tin chi ti·∫øt v·ªÅ th√†nh t√≠ch PvP c·ªßa {target.mention}",
            color=SECT_COLORS.get(player.get('sect', 'Kh√¥ng c√≥'), 0x9b59b6),
            timestamp=datetime.now()
        )

        # Th√¥ng tin c∆° b·∫£n
        embed.add_field(
            name="üìä PvP Th∆∞·ªùng",
            value=(
                f"üèÜ Th·∫Øng: {pvp_wins}\n"
                f"üíî Thua: {pvp_losses}\n"
                f"üîÑ T·ªïng s·ªë tr·∫≠n: {total_pvp}\n"
                f"üìà T·ª∑ l·ªá th·∫Øng: {win_rate:.1f}%"
            ),
            inline=True
        )

        embed.add_field(
            name="ü§∫ ƒê·∫•u T·ª± Do",
            value=(
                f"üèÜ Th·∫Øng: {friendly_wins}\n"
                f"üíî Thua: {friendly_losses}\n"
                f"üîÑ T·ªïng s·ªë tr·∫≠n: {total_friendly}\n"
                f"üìà T·ª∑ l·ªá th·∫Øng: {friendly_win_rate:.1f}%"
            ),
            inline=True
        )

        # Th√™m th√¥ng tin t·ªïng h·ª£p
        total_wins = pvp_wins + friendly_wins
        total_losses = pvp_losses + friendly_losses
        total_matches = total_pvp + total_friendly
        total_win_rate = (total_wins / total_matches * 100) if total_matches > 0 else 0

        embed.add_field(
            name="üìà T·ªïng H·ª£p",
            value=(
                f"üèÜ T·ªïng th·∫Øng: {total_wins}\n"
                f"üíî T·ªïng thua: {total_losses}\n"
                f"üîÑ T·ªïng s·ªë tr·∫≠n: {total_matches}\n"
                f"üìà T·ª∑ l·ªá th·∫Øng t·ªïng: {total_win_rate:.1f}%"
            ),
            inline=False
        )

        # Th√™m th√¥ng tin v·ªÅ exp ƒë√£ c∆∞·ªõp ƒë∆∞·ª£c
        exp_stolen = stats.get('exp_stolen', 0)
        exp_lost = stats.get('exp_lost', 0)

        if exp_stolen > 0 or exp_lost > 0:
            embed.add_field(
                name="üí∞ EXP PvP",
                value=(
                    f"üìà EXP ƒë√£ c∆∞·ªõp: {exp_stolen:,}\n"
                    f"üìâ EXP ƒë√£ m·∫•t: {exp_lost:,}\n"
                    f"üìä C√¢n b·∫±ng: {(exp_stolen - exp_lost):+,}"
                ),
                inline=False
            )

        # Th√™m th√¥ng tin v·ªÅ ƒë·ªëi th·ªß th∆∞·ªùng g·∫∑p
        recent_opponents = await self.db.get_recent_opponents(target.id, limit=3)
        if recent_opponents:
            opponents_text = []
            for opponent_id, count in recent_opponents:
                opponent = self.bot.get_user(opponent_id)
                name = opponent.display_name if opponent else f"ID: {opponent_id}"
                opponents_text.append(f"‚Ä¢ {name}: {count} tr·∫≠n")

            embed.add_field(
                name="üë• ƒê·ªëi Th·ªß Th∆∞·ªùng G·∫∑p",
                value="\n".join(opponents_text) if opponents_text else "Kh√¥ng c√≥ d·ªØ li·ªáu",
                inline=False
            )

        # Th√™m avatar ng∆∞·ªùi ch∆°i
        if target.avatar:
            embed.set_thumbnail(url=target.avatar.url)

        # Th√™m footer
        embed.set_footer(text="Tu Ti√™n PvP ‚Ä¢ S·ª≠ d·ª•ng !combat @ng∆∞·ªùi_ch∆°i ƒë·ªÉ khi√™u chi·∫øn")

        await ctx.send(embed=embed)

    @commands.command(name="pvphistory", aliases=["lichsu", "history"], usage="[s·ªë_l∆∞·ª£ng]")
    async def pvp_history(self, ctx, limit: int = 5):
        """Xem l·ªãch s·ª≠ chi·∫øn ƒë·∫•u PvP g·∫ßn ƒë√¢y"""
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tr·∫≠n ƒë·∫•u hi·ªÉn th·ªã
        limit = min(max(1, limit), 10)  # Gi·ªõi h·∫°n t·ª´ 1-10

        # L·∫•y l·ªãch s·ª≠ chi·∫øn ƒë·∫•u
        history = await self.db.get_combat_history(ctx.author.id, limit=limit)

        if not history:
            await ctx.send("B·∫°n ch∆∞a c√≥ tr·∫≠n ƒë·∫•u n√†o!")
            return

        # T·∫°o embed
        embed = discord.Embed(
            title=f"üìú L·ªãch S·ª≠ Chi·∫øn ƒê·∫•u c·ªßa {ctx.author.display_name}",
            description=f"{len(history)} tr·∫≠n ƒë·∫•u g·∫ßn ƒë√¢y nh·∫•t",
            color=0x3498db,
            timestamp=datetime.now()
        )

        # Th√™m th√¥ng tin t·ª´ng tr·∫≠n ƒë·∫•u
        for i, match in enumerate(history, 1):
            # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
            opponent_id = match['defender_id'] if match['attacker_id'] == ctx.author.id else match['attacker_id']
            opponent = self.bot.get_user(opponent_id)
            opponent_name = opponent.display_name if opponent else f"ID: {opponent_id}"

            # X√°c ƒë·ªãnh k·∫øt qu·∫£
            is_attacker = match['attacker_id'] == ctx.author.id
            is_win = (is_attacker and match['result'] == 'win') or (not is_attacker and match['result'] == 'lose')

            # ƒê·ªãnh d·∫°ng th·ªùi gian
            match_time = match.get('timestamp', datetime.now())
            if isinstance(match_time, str):
                try:
                    match_time = datetime.strptime(match_time, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    match_time = datetime.now()

            time_ago = self.format_time_ago(match_time)

            # T·∫°o n·ªôi dung
            result_emoji = "üèÜ" if is_win else "üíî"
            match_type = "ƒê·∫•u T·ª± Do" if match.get('friendly', False) else "PvP"
            exp_text = f" (+{match['exp_gained']:,} EXP)" if match['exp_gained'] > 0 and is_win else ""

            match_text = (
                f"{result_emoji} **{match_type}** vs {opponent_name}\n"
                f"{'Th·∫Øng' if is_win else 'Thua'}{exp_text} ‚Ä¢ {time_ago}"
            )

            embed.add_field(
                name=f"Tr·∫≠n #{i}",
                value=match_text,
                inline=True
            )

        # Th√™m footer
        embed.set_footer(text=f"S·ª≠ d·ª•ng !pvphistory [s·ªë_l∆∞·ª£ng] ƒë·ªÉ xem th√™m ‚Ä¢ T·ªëi ƒëa 10 tr·∫≠n")

        await ctx.send(embed=embed)

    def format_time_ago(self, past_time: datetime) -> str:
        """ƒê·ªãnh d·∫°ng th·ªùi gian ƒë√£ tr√¥i qua (v√≠ d·ª•: '5 ph√∫t tr∆∞·ªõc')"""
        now = datetime.now()
        diff = (now - past_time).total_seconds()

        if diff < 60:
            return "v·ª´a xong"
        elif diff < 3600:
            minutes = int(diff // 60)
            return f"{minutes} ph√∫t tr∆∞·ªõc"
        elif diff < 86400:
            hours = int(diff // 3600)
            return f"{hours} gi·ªù tr∆∞·ªõc"
        elif diff < 604800:  # 7 days
            days = int(diff // 86400)
            return f"{days} ng√†y tr∆∞·ªõc"
        else:
            return past_time.strftime("%d/%m/%Y")

    @combat.error
    async def combat_error(self, ctx, error):
        """X·ª≠ l√Ω l·ªói l·ªánh combat"""
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("S·ª≠ d·ª•ng: !combat @ng∆∞·ªùi_ch∆°i")
            ctx.command.reset_cooldown(ctx)
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i! H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ tag ƒë√∫ng ng∆∞·ªùi.")
            ctx.command.reset_cooldown(ctx)
        elif isinstance(error, commands.CommandOnCooldown):
            await ctx.send(
                f"‚è≥ **{ctx.author.display_name}**, c√≤n {format_time(int(error.retry_after))} n·ªØa m·ªõi c√≥ th·ªÉ chi·∫øn ƒë·∫•u!")
        else:
            print(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong combat: {error}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh combat!")
            ctx.command.reset_cooldown(ctx)

    @friendly_duel.error
    async def friendly_duel_error(self, ctx, error):
        """X·ª≠ l√Ω l·ªói l·ªánh tudo"""
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("S·ª≠ d·ª•ng: !tudo @ng∆∞·ªùi_ch∆°i")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i! H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ tag ƒë√∫ng ng∆∞·ªùi.")
        else:
            print(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong tudo: {error}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh tudo!")


async def setup(bot):
    await bot.add_cog(Combat(bot, bot.db))