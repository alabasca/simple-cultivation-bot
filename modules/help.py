import discord
from discord.ext import commands
from config import CULTIVATION_LEVELS, CHAT_EXP, VOICE_EXP, MONSTER_EXP, BOSS_EXP, SECTS, SECT_EMOJIS
import asyncio
from typing import List, Dict, Any, Optional, Union
from datetime import datetime, timedelta
import random


class Help(commands.Cog):
    """H·ªá th·ªëng h∆∞·ªõng d·∫´n v√† tr·ª£ gi√∫p"""

    def __init__(self, bot):
        self.bot = bot
        self.help_cache = {}
        self.cache_lock = asyncio.Lock()
        self.cache_lifetime = 300  # 5 ph√∫t
        self.interactive_sessions = {}  # L∆∞u tr·ªØ phi√™n t∆∞∆°ng t√°c

        # Danh s√°ch c√°c emoji cho n√∫t ƒëi·ªÅu h∆∞·ªõng
        self.nav_emojis = {
            "first": "‚èÆÔ∏è",
            "prev": "‚óÄÔ∏è",
            "next": "‚ñ∂Ô∏è",
            "last": "‚è≠Ô∏è",
            "close": "‚ùå"
        }

        # Danh s√°ch c√°c emoji cho c√°c ch·ªß ƒë·ªÅ
        self.topic_emojis = {
            "main": "üìö",
            "commands": "üéÆ",
            "exp": "üí´",
            "levels": "üåü",
            "sects": "üèØ",
            "combat": "‚öîÔ∏è",
            "items": "üéí",
            "events": "üéâ"
        }

        # Danh s√°ch c√°c ch·ªß ƒë·ªÅ v√† ti√™u ƒë·ªÅ
        self.topics = {
            "main": "Gi·ªõi Thi·ªáu H·ªá Th·ªëng Tu Ti√™n",
            "commands": "C√°c L·ªánh C∆° B·∫£n",
            "exp": "H·ªá Th·ªëng Tu Luy·ªán & Ph·∫ßn Th∆∞·ªüng",
            "levels": "H·ªá Th·ªëng C·∫£nh Gi·ªõi",
            "sects": "H·ªá Th·ªëng M√¥n Ph√°i",
            "combat": "H·ªá Th·ªëng Chi·∫øn ƒê·∫•u",
            "items": "V·∫≠t Ph·∫©m & Trang B·ªã",
            "events": "S·ª± Ki·ªán & Ho·∫°t ƒê·ªông"
        }

    async def get_cached_help(self, section: str) -> discord.Embed:
        """L·∫•y help embed t·ª´ cache ho·∫∑c t·∫°o m·ªõi"""
        async with self.cache_lock:
            if section in self.help_cache:
                embed, timestamp = self.help_cache[section]
                if (datetime.now() - timestamp).seconds < self.cache_lifetime:
                    return embed

            # T·∫°o embed m·ªõi n·∫øu kh√¥ng c√≥ trong cache ho·∫∑c ƒë√£ h·∫øt h·∫°n
            embed = await self.create_help_section(section)
            self.help_cache[section] = (embed, datetime.now())
            return embed

    async def create_help_section(self, section: str) -> discord.Embed:
        """T·∫°o c√°c section help ri√™ng bi·ªát"""
        if section == "main":
            return await self.create_main_embed()
        elif section == "commands":
            return await self.create_commands_embed()
        elif section == "exp":
            return await self.create_exp_embed()
        elif section == "levels":
            return await self.create_levels_embed()
        elif section == "sects":
            return await self.create_sects_embed()
        elif section == "combat":
            return await self.create_combat_embed()
        elif section == "items":
            return await self.create_items_embed()
        elif section == "events":
            return await self.create_events_embed()
        return None

    async def create_main_embed(self) -> discord.Embed:
        """T·∫°o embed gi·ªõi thi·ªáu ch√≠nh"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['main']} H·ªá Th·ªëng Tu Ti√™n",
            description=(
                "Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi tu ti√™n. D∆∞·ªõi ƒë√¢y l√† nh·ªØng th√¥ng tin c∆° b·∫£n "
                "gi√∫p ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.\n\n"
                "**B·∫Øt ƒê·∫ßu Tu Luy·ªán:**\n"
                "‚Ä¢ Ch·ªçn m√¥n ph√°i trong k√™nh üèØ‚îÉt√¥ng-m√¥n-chi-l·ªô\n"
                "‚Ä¢ ƒêi·ªÉm danh h√†ng ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng\n"
                "‚Ä¢ Tu luy·ªán th√¥ng qua chat, voice v√† chi·∫øn ƒë·∫•u\n\n"
                "**L·ªánh C∆° B·∫£n:**\n"
                "‚Ä¢ `!tutien` - Xem h∆∞·ªõng d·∫´n n√†y\n"
                "‚Ä¢ `!tuvi` - Xem th√¥ng tin tu vi\n"
                "‚Ä¢ `!daily` - ƒêi·ªÉm danh nh·∫≠n th∆∞·ªüng"
            ),
            color=0xf1c40f
        )

        # Th√™m th√¥ng tin v·ªÅ c√°ch s·ª≠ d·ª•ng h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c
        embed.add_field(
            name="üîç H∆∞·ªõng D·∫´n T∆∞∆°ng T√°c",
            value=(
                "S·ª≠ d·ª•ng `!help [ch·ªß_ƒë·ªÅ]` ƒë·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt ch·ªß ƒë·ªÅ c·ª• th·ªÉ:\n"
                "‚Ä¢ `!help commands` - Danh s√°ch l·ªánh\n"
                "‚Ä¢ `!help exp` - H·ªá th·ªëng kinh nghi·ªám\n"
                "‚Ä¢ `!help levels` - C·∫£nh gi·ªõi tu luy·ªán\n"
                "‚Ä¢ `!help sects` - Th√¥ng tin m√¥n ph√°i\n"
                "‚Ä¢ `!help combat` - H·ªá th·ªëng chi·∫øn ƒë·∫•u\n"
                "‚Ä¢ `!help items` - V·∫≠t ph·∫©m v√† trang b·ªã\n"
                "‚Ä¢ `!help events` - S·ª± ki·ªán v√† ho·∫°t ƒë·ªông"
            ),
            inline=False
        )

        # Th√™m th√¥ng tin v·ªÅ c√°ch s·ª≠ d·ª•ng l·ªánh help cho t·ª´ng l·ªánh c·ª• th·ªÉ
        embed.add_field(
            name="‚ùì Tr·ª£ Gi√∫p L·ªánh C·ª• Th·ªÉ",
            value=(
                "S·ª≠ d·ª•ng `!help [t√™n_l·ªánh]` ƒë·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ:\n"
                "V√≠ d·ª•: `!help tuvi`, `!help danhquai`, `!help tongmon`"
            ),
            inline=False
        )

        embed.set_thumbnail(url="https://i.imgur.com/3MUxw2G.png")

        # Th√™m footer v·ªõi th√¥ng tin phi√™n b·∫£n
        embed.set_footer(text="Tu Ti√™n Bot v1.0 ‚Ä¢ S·ª≠ d·ª•ng !tutien ƒë·ªÉ xem l·∫°i h∆∞·ªõng d·∫´n")

        return embed

    async def create_commands_embed(self) -> discord.Embed:
        """T·∫°o embed danh s√°ch l·ªánh"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['commands']} C√°c L·ªánh C∆° B·∫£n",
            description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh ch√≠nh trong h·ªá th·ªëng tu ti√™n:",
            color=0x3498db
        )

        # Th√¥ng tin & ƒêi·ªÉm danh
        embed.add_field(
            name="üìù Th√¥ng Tin & ƒêi·ªÉm Danh",
            value=(
                "`!tuvi [@ng∆∞·ªùi_ch∆°i]` - Xem th√¥ng tin tu vi\n"
                "`!tutien` - Xem h∆∞·ªõng d·∫´n t·ªïng quan\n"
                "`!help [l·ªánh/ch·ªß_ƒë·ªÅ]` - Xem h∆∞·ªõng d·∫´n chi ti·∫øt\n"
                "`!daily` ho·∫∑c `!diemdanh` - ƒêi·ªÉm danh nh·∫≠n th∆∞·ªüng\n"
                "`!exp [@ng∆∞·ªùi_ch∆°i]` - Xem chi ti·∫øt kinh nghi·ªám\n"
                "`!rank [@ng∆∞·ªùi_ch∆°i]` - Xem chi ti·∫øt c·∫£nh gi·ªõi"
            ),
            inline=False
        )

        # Tu luy·ªán & Chi·∫øn ƒë·∫•u
        embed.add_field(
            name="‚öîÔ∏è Tu Luy·ªán & Chi·∫øn ƒê·∫•u",
            value=(
                "`!danhquai` - ƒê√°nh qu√°i v·∫≠t (10 ph√∫t/l·∫ßn)\n"
                "`!danhboss` - ƒê√°nh boss (30 ph√∫t/l·∫ßn)\n"
                "`!combat @ng∆∞·ªùi_ch∆°i` - PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c (30 ph√∫t/l·∫ßn)\n"
                "`!tudo @ng∆∞·ªùi_ch∆°i` - Th√°ch ƒë·∫•u t·ª± do (kh√¥ng ·∫£nh h∆∞·ªüng EXP)\n"
                "`!luyendan` - Luy·ªán ƒëan d∆∞·ª£c (1 gi·ªù/l·∫ßn)"
            ),
            inline=False
        )

        # V·∫≠t ph·∫©m & Trang b·ªã
        embed.add_field(
            name="üéí V·∫≠t Ph·∫©m & Trang b·ªã",
            value=(
                "`!kho` - Xem kho ƒë·ªì c√° nh√¢n\n"
                "`!trangbi` - Xem v√† qu·∫£n l√Ω trang b·ªã\n"
                "`!shop` - M·ªü c·ª≠a h√†ng ƒë·∫°o c·ª•\n"
                "`!sudung [v·∫≠t_ph·∫©m]` - S·ª≠ d·ª•ng v·∫≠t ph·∫©m\n"
                "`!tangthu` - Xem t√†ng th∆∞ m√¥n ph√°i"
            ),
            inline=False
        )

        # Th·ªëng k√™ & Ti·ªán √≠ch
        embed.add_field(
            name="üìä Th·ªëng K√™ & Ti·ªán √çch",
            value=(
                "`!server_info` - Xem th√¥ng tin server\n"
                "`!top [all/sect] [s·ªë_l∆∞·ª£ng]` - Xem b·∫£ng x·∫øp h·∫°ng\n"
                "`!stats` - Xem th·ªëng k√™ chi ti·∫øt\n"
                "`!ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ\n"
                "`!roll [s·ªë]` - Random s·ªë ng·∫´u nhi√™n"
            ),
            inline=False
        )

        # Th√™m ghi ch√∫
        embed.add_field(
            name="üìù Ghi Ch√∫",
            value=(
                "‚Ä¢ S·ª≠ d·ª•ng `!help [t√™n_l·ªánh]` ƒë·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ\n"
                "‚Ä¢ C√°c l·ªánh c√≥ th·ªÉ c√≥ cooldown ri√™ng\n"
                "‚Ä¢ M·ªôt s·ªë l·ªánh y√™u c·∫ßu c·∫£nh gi·ªõi nh·∫•t ƒë·ªãnh\n"
                "‚Ä¢ M·ªôt s·ªë l·ªánh ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh ch·ªâ ƒë·ªãnh"
            ),
            inline=False
        )

        return embed

    async def create_exp_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin kinh nghi·ªám"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['exp']} H·ªá Th·ªëng Tu Luy·ªán & Ph·∫ßn Th∆∞·ªüng",
            description="C√≥ nhi·ªÅu c√°ch ƒë·ªÉ tƒÉng c√¥ng l·ª±c v√† tu vi:",
            color=0x2ecc71
        )

        # ƒêi·ªÉm danh
        embed.add_field(
            name="üåü ƒêi·ªÉm Danh H√†ng Ng√†y",
            value=(
                "‚Ä¢ Ph·∫ßn th∆∞·ªüng c∆° b·∫£n: 100 EXP\n"
                "‚Ä¢ Bonus streak: +10% m·ªói ng√†y (t·ªëi ƒëa 100%)\n"
                "‚Ä¢ Ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát m·ªói 7 ng√†y\n"
                "‚Ä¢ Reset streak n·∫øu b·ªè l·ª° 2 ng√†y li√™n ti·∫øp"
            ),
            inline=False
        )

        # Tu luy·ªán th∆∞·ªùng ng√†y
        embed.add_field(
            name="üìà Tu Luy·ªán Th∆∞·ªùng Ng√†y",
            value=(
                f"‚Ä¢ Chat: +{CHAT_EXP} EXP m·ªói tin nh·∫Øn\n"
                f"‚Ä¢ Voice: +{VOICE_EXP} EXP m·ªói ph√∫t\n"
                f"‚Ä¢ ƒê√°nh qu√°i: +{MONSTER_EXP} EXP (c√≥ th·ªÉ nh·∫≠n bonus)\n"
                f"‚Ä¢ ƒê√°nh boss: +{BOSS_EXP} EXP (c√≥ th·ªÉ nh·∫≠n bonus)\n"
                "‚Ä¢ PvP: C∆∞·ªõp 10% EXP ƒë·ªëi th·ªß (t·ªëi ƒëa 500 EXP)"
            ),
            inline=False
        )

        # Nhi·ªám v·ª• v√† s·ª± ki·ªán
        embed.add_field(
            name="üéØ Nhi·ªám V·ª• & S·ª± Ki·ªán",
            value=(
                "‚Ä¢ Nhi·ªám v·ª• h√†ng ng√†y: 50-200 EXP\n"
                "‚Ä¢ Nhi·ªám v·ª• h√†ng tu·∫ßn: 300-1000 EXP\n"
                "‚Ä¢ S·ª± ki·ªán ƒë·∫∑c bi·ªát: Ph·∫ßn th∆∞·ªüng ƒëa d·∫°ng\n"
                "‚Ä¢ ƒê·∫°i h·ªôi t√¥ng m√¥n: EXP v√† v·∫≠t ph·∫©m qu√Ω hi·∫øm"
            ),
            inline=False
        )

        # Luy·ªán ƒëan v√† ch·∫ø t·∫°o
        embed.add_field(
            name="üß™ Luy·ªán ƒêan & Ch·∫ø T·∫°o",
            value=(
                "‚Ä¢ Luy·ªán ƒëan: 50-300 EXP m·ªói l·∫ßn th√†nh c√¥ng\n"
                "‚Ä¢ Ch·∫ø t·∫°o v≈© kh√≠: 100-500 EXP m·ªói l·∫ßn th√†nh c√¥ng\n"
                "‚Ä¢ ƒê·ªôt ph√° trang b·ªã: 200-1000 EXP m·ªói l·∫ßn th√†nh c√¥ng\n"
                "‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng ph·ª• thu·ªôc v√†o c·∫£nh gi·ªõi"
            ),
            inline=False
        )

        # Th√™m bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng
        embed.add_field(
            name="üìä Bi·ªÉu ƒê·ªì TƒÉng Tr∆∞·ªüng",
            value=(
                "```\n"
                "C·∫•p ƒë·ªô      | EXP/ng√†y (∆∞·ªõc t√≠nh)\n"
                "------------|-------------------\n"
                "Ph√†m Nh√¢n   | 300-500 EXP\n"
                "Luy·ªán Kh√≠   | 500-800 EXP\n"
                "Tr√∫c C∆°     | 800-1200 EXP\n"
                "Nguy√™n Anh  | 1000-1500 EXP\n"
                "Kim ƒêan     | 1200-2000 EXP\n"
                "```"
            ),
            inline=False
        )

        return embed

    async def create_levels_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin c·∫£nh gi·ªõi"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['levels']} H·ªá Th·ªëng C·∫£nh Gi·ªõi",
            description=(
                "Con ƒë∆∞·ªùng tu ti√™n gian nan, ƒë·∫ßy th·ª≠ th√°ch. "
                "M·ªói b∆∞·ªõc ti·∫øn l√† m·ªôt b∆∞·ªõc g·∫ßn h∆°n ƒë·∫øn v·ªõi ƒë·∫°i ƒë·∫°o."
            ),
            color=0xe74c3c
        )

        # T·∫°o c√°c field cho t·ª´ng c·∫£nh gi·ªõi
        realm_info = {
            "üë§ Ph√†m Nh√¢n": {
                "desc": (
                    "```\n"
                    "‚Ä¢ C·∫•p ƒë·ªô kh·ªüi ƒë·∫ßu\n"
                    "‚Ä¢ Ch∆∞a c√≥ linh cƒÉn\n"
                    f"‚Ä¢ EXP y√™u c·∫ßu: {CULTIVATION_LEVELS['Ph√†m Nh√¢n']['exp_req']:,}\n"
                    "```"
                ),
                "inline": False
            },
            "üåä Luy·ªán Kh√≠ (9 T·∫ßng)": {
                "desc": await self.create_cultivation_stages(
                    "Luy·ªán Kh√≠",
                    [
                        ("T·∫ßng 1", "Linh kh√≠ nh·∫≠p th·ªÉ"),
                        ("T·∫ßng 2", "Khai th√¥ng kinh m·∫°ch"),
                        ("T·∫ßng 3", "Linh kh√≠ tu·∫ßn ho√†n"),
                        ("T·∫ßng 4", "Kinh m·∫°ch c·ªßng c·ªë"),
                        ("T·∫ßng 5", "Linh kh√≠ th√†nh t·ª•"),
                        ("T·∫ßng 6", "Linh cƒÉn th√†nh h√¨nh"),
                        ("T·∫ßng 7", "Linh kh√≠ h√≥a ch√¢n"),
                        ("T·∫ßng 8", "B√°t m·∫°ch th√¥ng su·ªët"),
                        ("T·∫ßng 9", "C·ª≠u khi·∫øu ng∆∞ng th·∫ßn")
                    ]
                ),
                "inline": False
            },
            "üí´ Tr√∫c C∆° (3 T·∫ßng)": {
                "desc": await self.create_cultivation_stages(
                    "Tr√∫c C∆°",
                    [
                        ("S∆° K·ª≥", "ƒê·∫∑t n·ªÅn m√≥ng"),
                        ("Trung K·ª≥", "C·ªßng c·ªë ƒë·∫°o t√¢m"),
                        ("ƒê·∫°i Vi√™n M√£n", "Tr√∫c c∆° th√†nh c√¥ng")
                    ]
                ),
                "inline": False
            },
            "‚ú® Nguy√™n Anh (3 T·∫ßng)": {
                "desc": await self.create_cultivation_stages(
                    "Nguy√™n Anh",
                    [
                        ("S∆° K·ª≥", "Nguy√™n anh th√†nh h√¨nh"),
                        ("Trung K·ª≥", "Nguy√™n anh c·ªßng c·ªë"),
                        ("ƒê·∫°i Vi√™n M√£n", "Nguy√™n anh vi√™n m√£n")
                    ]
                ),
                "inline": False
            },
            "üî• Kim ƒêan (3 T·∫ßng)": {
                "desc": await self.create_cultivation_stages(
                    "Kim ƒêan",
                    [
                        ("S∆° K·ª≥", "Kim ƒëan th√†nh h√¨nh"),
                        ("Trung K·ª≥", "Kim ƒëan c·ªßng c·ªë"),
                        ("ƒê·∫°i Vi√™n M√£n", "Kim ƒëan vi√™n m√£n")
                    ]
                ),
                "inline": False
            }
        }

        # Th√™m c√°c field v√†o embed
        for title, info in realm_info.items():
            embed.add_field(
                name=title,
                value=info["desc"],
                inline=info["inline"]
            )

        # Th√™m ghi ch√∫
        embed.add_field(
            name="üìù Ghi Ch√∫",
            value=(
                "```\n"
                "‚Ä¢ EXP tƒÉng theo c·∫•p s·ªë nh√¢n\n"
                "‚Ä¢ M·ªói c·∫•p ƒë·ªô c√≥ ch·ªâ s·ªë ri√™ng\n"
                "‚Ä¢ C√≥ th·ªÉ v∆∞·ª£t c·∫•p chi·∫øn ƒë·∫•u\n"
                "‚Ä¢ C√†ng l√™n cao c√†ng kh√≥ khƒÉn\n"
                "‚Ä¢ S·ª≠ d·ª•ng !levels ƒë·ªÉ xem chi ti·∫øt h∆°n\n"
                "```"
            ),
            inline=False
        )

        return embed

    async def create_cultivation_stages(self, realm: str, stages: List[tuple]) -> str:
        """T·∫°o chu·ªói hi·ªÉn th·ªã c√°c giai ƒëo·∫°n tu luy·ªán"""
        result = ["```"]
        for i, (stage, desc) in enumerate(stages):
            prefix = "‚îú‚îÄ" if i < len(stages) - 1 else "‚îî‚îÄ"
            level_key = f"{realm} {stage}"
            exp_req = 0

            # T√¨m ki·∫øm key ph√π h·ª£p trong CULTIVATION_LEVELS
            for key in CULTIVATION_LEVELS:
                if key.startswith(level_key):
                    exp_req = CULTIVATION_LEVELS[key]['exp_req']
                    break

            result.append(f"{prefix} {stage:<12} ‚îÄ {desc}")
            result.append(f"   EXP: {exp_req:,}")

        result.append("```")
        return "\n".join(result)

    async def create_sects_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin m√¥n ph√°i"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['sects']} H·ªá Th·ªëng M√¥n Ph√°i",
            description="M·ªói m√¥n ph√°i c√≥ nh·ªØng ƒë·∫∑c tr∆∞ng v√† ∆∞u ƒëi·ªÉm ri√™ng:",
            color=0x9b59b6
        )

        # Th√¥ng tin t·ª´ng m√¥n ph√°i
        for sect_name, sect_data in SECTS.items():
            emoji = SECT_EMOJIS.get(sect_name, "üèØ")

            # T·∫°o m√¥ t·∫£ chi ti·∫øt
            description = sect_data.get('description', "Kh√¥ng c√≥ m√¥ t·∫£")
            attack_bonus = sect_data.get('attack_bonus', 1.0)
            defense_bonus = sect_data.get('defense_bonus', 1.0)

            # T·∫°o chu·ªói bonus
            bonuses = []
            if attack_bonus != 1.0:
                bonus_percent = int((attack_bonus - 1.0) * 100)
                bonuses.append(f"‚öîÔ∏è +{bonus_percent}% C√¥ng K√≠ch")

            if defense_bonus != 1.0:
                bonus_percent = int((defense_bonus - 1.0) * 100)
                bonuses.append(f"üõ°Ô∏è +{bonus_percent}% Ph√≤ng Th·ªß")

            # Th√™m c√°c bonus ƒë·∫∑c bi·ªát kh√°c n·∫øu c√≥
            special_bonus = sect_data.get('special_bonus', None)
            if special_bonus:
                bonuses.append(f"‚ú® {special_bonus}")

            # T·∫°o chu·ªói hi·ªÉn th·ªã
            value = f"{description}\n" + "\n".join(bonuses)

            # Th√™m th√¥ng tin v·ªÅ k·ªπ nƒÉng ƒë·∫∑c bi·ªát n·∫øu c√≥
            special_skill = sect_data.get('special_skill', None)
            if special_skill:
                value += f"\nüîÆ K·ªπ nƒÉng: {special_skill}"

            embed.add_field(
                name=f"{emoji} {sect_name}",
                value=value,
                inline=False
            )

        # Th√™m th√¥ng tin v·ªÅ c√°ch gia nh·∫≠p m√¥n ph√°i
        embed.add_field(
            name="üìù Gia Nh·∫≠p M√¥n Ph√°i",
            value=(
                "‚Ä¢ S·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i\n"
                "‚Ä¢ M·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt m√¥n ph√°i\n"
                "‚Ä¢ C√≥ th·ªÉ ƒë·ªïi m√¥n ph√°i sau 7 ng√†y v·ªõi chi ph√≠ 1000 EXP\n"
                "‚Ä¢ M·ªói m√¥n ph√°i c√≥ nhi·ªám v·ª• v√† ph·∫ßn th∆∞·ªüng ri√™ng"
            ),
            inline=False
        )

        return embed

    async def create_combat_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin h·ªá th·ªëng chi·∫øn ƒë·∫•u"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['combat']} H·ªá Th·ªëng Chi·∫øn ƒê·∫•u",
            description="H·ªá th·ªëng chi·∫øn ƒë·∫•u ƒëa d·∫°ng v·ªõi nhi·ªÅu c∆° ch·∫ø:",
            color=0xe67e22
        )

        # Th√¥ng tin c∆° b·∫£n v·ªÅ chi·∫øn ƒë·∫•u
        embed.add_field(
            name="‚öîÔ∏è C∆° Ch·∫ø Chi·∫øn ƒê·∫•u",
            value=(
                "‚Ä¢ Ch·ªâ s·ªë chi·∫øn ƒë·∫•u d·ª±a tr√™n c·∫£nh gi·ªõi v√† trang b·ªã\n"
                "‚Ä¢ C√¥ng th·ª©c: S√°t th∆∞∆°ng = (C√¥ng k√≠ch ng∆∞·ªùi t·∫•n c√¥ng - Ph√≤ng th·ªß ng∆∞·ªùi b·ªã t·∫•n c√¥ng/2) * H·ªá s·ªë ng·∫´u nhi√™n\n"
                "‚Ä¢ H·ªá s·ªë ng·∫´u nhi√™n: 0.8 - 1.2\n"
                "‚Ä¢ C√≥ c∆° h·ªôi t·∫•n c√¥ng ch√≠ m·∫°ng (x1.5 s√°t th∆∞∆°ng)\n"
                "‚Ä¢ C√≥ c∆° h·ªôi n√© tr√°nh (ph·ª• thu·ªôc v√†o ch√™nh l·ªách c·∫£nh gi·ªõi)"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ PvE
        embed.add_field(
            name="üê∫ ƒê√°nh Qu√°i (PvE)",
            value=(
                f"‚Ä¢ L·ªánh: `!danhquai` (Cooldown: 10 ph√∫t)\n"
                f"‚Ä¢ Ph·∫ßn th∆∞·ªüng: {MONSTER_EXP} EXP + v·∫≠t ph·∫©m ng·∫´u nhi√™n\n"
                "‚Ä¢ Lo·∫°i qu√°i: Th∆∞·ªùng, Tinh Anh, Th·ªß Lƒ©nh (t·ª∑ l·ªá xu·∫•t hi·ªán kh√°c nhau)\n"
                "‚Ä¢ C·∫•p ƒë·ªô qu√°i ph·ª• thu·ªôc v√†o c·∫£nh gi·ªõi ng∆∞·ªùi ch∆°i\n"
                "‚Ä¢ C√≥ th·ªÉ th·∫•t b·∫°i n·∫øu m√°u v·ªÅ 0"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ Boss
        embed.add_field(
            name="üêâ ƒê√°nh Boss",
            value=(
                f"‚Ä¢ L·ªánh: `!danhboss` (Cooldown: 30 ph√∫t)\n"
                f"‚Ä¢ Ph·∫ßn th∆∞·ªüng: {BOSS_EXP} EXP + v·∫≠t ph·∫©m qu√Ω hi·∫øm\n"
                "‚Ä¢ Boss m·∫°nh h∆°n qu√°i th∆∞·ªùng nhi·ªÅu l·∫ßn\n"
                "‚Ä¢ C√≥ th·ªÉ th·∫•t b·∫°i n·∫øu m√°u v·ªÅ 0\n"
                "‚Ä¢ C√≥ th·ªÉ m·ªùi ƒë·ªìng ƒë·ªôi c√πng ƒë√°nh boss"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ PvP
        embed.add_field(
            name="ü•ä PvP V·ªõi Ng∆∞·ªùi Ch∆°i",
            value=(
                "‚Ä¢ L·ªánh: `!combat @ng∆∞·ªùi_ch∆°i` (Cooldown: 30 ph√∫t)\n"
                "‚Ä¢ Ph·∫ßn th∆∞·ªüng: C∆∞·ªõp 10% EXP ƒë·ªëi th·ªß (t·ªëi ƒëa 500 EXP)\n"
                "‚Ä¢ Ng∆∞·ªùi thua m·∫•t EXP v√† c√≥ th·ªÉ b·ªã th∆∞∆°ng\n"
                "‚Ä¢ Ch·ªâ c√≥ th·ªÉ PvP v·ªõi ng∆∞·ªùi c√≥ c·∫£nh gi·ªõi ch√™nh l·ªách ¬±2 c·∫•p\n"
                "‚Ä¢ C√≥ th·ªÉ t·ª´ ch·ªëi th√°ch ƒë·∫•u\n"
                "‚Ä¢ L·ªánh `!tudo @ng∆∞·ªùi_ch∆°i` ƒë·ªÉ th√°ch ƒë·∫•u kh√¥ng ·∫£nh h∆∞·ªüng EXP"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ trang b·ªã v√† k·ªπ nƒÉng
        embed.add_field(
            name="üõ°Ô∏è Trang B·ªã & K·ªπ NƒÉng",
            value=(
                "‚Ä¢ Trang b·ªã tƒÉng ch·ªâ s·ªë chi·∫øn ƒë·∫•u\n"
                "‚Ä¢ M·ªói m√¥n ph√°i c√≥ k·ªπ nƒÉng ƒë·∫∑c bi·ªát ri√™ng\n"
                "‚Ä¢ K·ªπ nƒÉng m·ªü kh√≥a theo c·∫£nh gi·ªõi\n"
                "‚Ä¢ ƒêan d∆∞·ª£c c√≥ th·ªÉ tƒÉng ch·ªâ s·ªë t·∫°m th·ªùi\n"
                "‚Ä¢ V≈© kh√≠ c√≥ th·ªÉ ƒë∆∞·ª£c n√¢ng c·∫•p ƒë·ªÉ tƒÉng s·ª©c m·∫°nh"
            ),
            inline=False
        )

        return embed

    async def create_items_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin v·∫≠t ph·∫©m v√† trang b·ªã"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['items']} V·∫≠t Ph·∫©m & Trang B·ªã",
            description="H·ªá th·ªëng v·∫≠t ph·∫©m ƒëa d·∫°ng v·ªõi nhi·ªÅu c√¥ng d·ª•ng:",
            color=0x1abc9c
        )

        # Th√¥ng tin v·ªÅ c√°c lo·∫°i v·∫≠t ph·∫©m
        embed.add_field(
            name="üß™ ƒêan D∆∞·ª£c",
            value=(
                "‚Ä¢ Linh Kh√≠ ƒêan: H·ªìi ph·ª•c HP trong chi·∫øn ƒë·∫•u\n"
                "‚Ä¢ TƒÉng L·ª±c ƒêan: TƒÉng c√¥ng k√≠ch t·∫°m th·ªùi\n"
                "‚Ä¢ C∆∞·ªùng Th·ªÉ ƒêan: TƒÉng ph√≤ng th·ªß t·∫°m th·ªùi\n"
                "‚Ä¢ Tu Vi ƒêan: TƒÉng EXP nh·∫≠n ƒë∆∞·ª£c\n"
                "‚Ä¢ T·∫©y T·ªßy ƒêan: Reset ƒëi·ªÉm ti·ªÅm nƒÉng"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ trang b·ªã
        embed.add_field(
            name="‚öîÔ∏è V≈© Kh√≠ & Trang B·ªã",
            value=(
                "‚Ä¢ V≈© kh√≠: TƒÉng s√°t th∆∞∆°ng\n"
                "‚Ä¢ √Åo gi√°p: TƒÉng ph√≤ng th·ªß\n"
                "‚Ä¢ Ph·ª• ki·ªán: TƒÉng c√°c ch·ªâ s·ªë kh√°c\n"
                "‚Ä¢ ƒê·ªô hi·∫øm: Ph√†m, Luy·ªán, Tr√∫c, Nguy√™n, Kim, Th·∫ßn\n"
                "‚Ä¢ C√≥ th·ªÉ n√¢ng c·∫•p v√† ƒë√≠nh linh th·∫°ch"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ nguy√™n li·ªáu
        embed.add_field(
            name="üíé Nguy√™n Li·ªáu",
            value=(
                "‚Ä¢ Linh th·∫°ch: Ti·ªÅn t·ªá trong game\n"
                "‚Ä¢ Linh th·∫£o: D√πng ƒë·ªÉ luy·ªán ƒëan\n"
                "‚Ä¢ Kho√°ng th·∫°ch: D√πng ƒë·ªÉ r√®n v≈© kh√≠\n"
                "‚Ä¢ Th√∫ h·∫°ch: Nh·∫≠n t·ª´ qu√°i v·∫≠t, d√πng ƒë·ªÉ ƒë·ªïi v·∫≠t ph·∫©m\n"
                "‚Ä¢ B√≠ t·ªãch: M·ªü kh√≥a k·ªπ nƒÉng m·ªõi"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ h·ªá th·ªëng kho ƒë·ªì
        embed.add_field(
            name="üéí Kho ƒê·ªì",
            value=(
                "‚Ä¢ L·ªánh: `!kho` ƒë·ªÉ xem kho ƒë·ªì\n"
                "‚Ä¢ L·ªánh: `!sudung [v·∫≠t_ph·∫©m]` ƒë·ªÉ s·ª≠ d·ª•ng\n"
                "‚Ä¢ L·ªánh: `!trangbi` ƒë·ªÉ qu·∫£n l√Ω trang b·ªã\n"
                "‚Ä¢ L·ªánh: `!ban [v·∫≠t_ph·∫©m] [s·ªë_l∆∞·ª£ng] [@ng∆∞·ªùi_ch∆°i]` ƒë·ªÉ b√°n/t·∫∑ng\n"
                "‚Ä¢ Dung l∆∞·ª£ng kho tƒÉng theo c·∫£nh gi·ªõi"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ c·ª≠a h√†ng
        embed.add_field(
            name="üè™ C·ª≠a H√†ng",
            value=(
                "‚Ä¢ L·ªánh: `!shop` ƒë·ªÉ m·ªü c·ª≠a h√†ng\n"
                "‚Ä¢ L·ªánh: `!mua [m√£_v·∫≠t_ph·∫©m] [s·ªë_l∆∞·ª£ng]` ƒë·ªÉ mua\n"
                "‚Ä¢ C·ª≠a h√†ng l√†m m·ªõi m·ªói ng√†y\n"
                "‚Ä¢ V·∫≠t ph·∫©m ƒë·∫∑c bi·ªát xu·∫•t hi·ªán ng·∫´u nhi√™n\n"
                "‚Ä¢ C√≥ th·ªÉ b√°n v·∫≠t ph·∫©m ƒë·ªÉ l·∫•y linh th·∫°ch"
            ),
            inline=False
        )

        return embed

    async def create_events_embed(self) -> discord.Embed:
        """T·∫°o embed th√¥ng tin s·ª± ki·ªán v√† ho·∫°t ƒë·ªông"""
        embed = discord.Embed(
            title=f"{self.topic_emojis['events']} S·ª± Ki·ªán & Ho·∫°t ƒê·ªông",
            description="Tham gia c√°c s·ª± ki·ªán ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát:",
            color=0x8e44ad
        )

        # Th√¥ng tin v·ªÅ s·ª± ki·ªán h√†ng ng√†y
        embed.add_field(
            name="üìÖ S·ª± Ki·ªán H√†ng Ng√†y",
            value=(
                "‚Ä¢ Nhi·ªám v·ª• h√†ng ng√†y: L√†m m·ªõi l√∫c 0h m·ªói ng√†y\n"
                "‚Ä¢ SƒÉn Y√™u Th√∫: Xu·∫•t hi·ªán ng·∫´u nhi√™n trong ng√†y\n"
                "‚Ä¢ T·∫ßm B·∫£o: T√¨m kho b√°u ·∫©n trong server\n"
                "‚Ä¢ Lu·∫≠n ƒê·∫°o: Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ tu ti√™n"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ s·ª± ki·ªán h√†ng tu·∫ßn
        embed.add_field(
            name="üìÜ S·ª± Ki·ªán H√†ng Tu·∫ßn",
            value=(
                "‚Ä¢ ƒê·∫°i H·ªôi T√¥ng M√¥n: Thi ƒë·∫•u gi·ªØa c√°c m√¥n ph√°i\n"
                "‚Ä¢ SƒÉn Boss Th·∫ø Gi·ªõi: Boss m·∫°nh xu·∫•t hi·ªán ng·∫´u nhi√™n\n"
                "‚Ä¢ Th√≠ Luy·ªán Th√°p: Th·ª≠ th√°ch nhi·ªÅu t·∫ßng, ph·∫ßn th∆∞·ªüng l·ªõn\n"
                "‚Ä¢ B√≠ C·∫£nh: Kh√°m ph√° b√≠ c·∫£nh, nh·∫≠n v·∫≠t ph·∫©m qu√Ω hi·∫øm"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ s·ª± ki·ªán theo m√πa
        embed.add_field(
            name="üé≠ S·ª± Ki·ªán Theo M√πa",
            value=(
                "‚Ä¢ Ti√™n M√¥n ƒê·∫°i H·ªôi: Di·ªÖn ra m·ªói th√°ng\n"
                "‚Ä¢ L·ªÖ H·ªôi M√πa Xu√¢n/H·∫°/Thu/ƒê√¥ng: Theo m√πa trong nƒÉm\n"
                "‚Ä¢ Ng√†y Th√†nh L·∫≠p Server: K·ª∑ ni·ªám ng√†y th√†nh l·∫≠p\n"
                "‚Ä¢ S·ª± Ki·ªán ƒê·∫∑c Bi·ªát: Theo c√°c d·ªãp l·ªÖ trong nƒÉm"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ ph·∫ßn th∆∞·ªüng
        embed.add_field(
            name="üèÜ Ph·∫ßn Th∆∞·ªüng",
            value=(
                "‚Ä¢ EXP: TƒÉng kinh nghi·ªám tu luy·ªán\n"
                "‚Ä¢ Linh Th·∫°ch: Ti·ªÅn t·ªá trong game\n"
                "‚Ä¢ V·∫≠t Ph·∫©m Qu√Ω: ƒêan d∆∞·ª£c, trang b·ªã hi·∫øm\n"
                "‚Ä¢ Danh Hi·ªáu: Danh hi·ªáu ƒë·∫∑c bi·ªát\n"
                "‚Ä¢ K·ªπ NƒÉng: M·ªü kh√≥a k·ªπ nƒÉng m·ªõi"
            ),
            inline=False
        )

        # Th√¥ng tin v·ªÅ c√°ch tham gia
        embed.add_field(
            name="üîç C√°ch Tham Gia",
            value=(
                "‚Ä¢ Theo d√µi th√¥ng b√°o trong k√™nh #th√¥ng-b√°o\n"
                "‚Ä¢ S·ª≠ d·ª•ng l·ªánh `!sukien` ƒë·ªÉ xem s·ª± ki·ªán hi·ªán t·∫°i\n"
                "‚Ä¢ ƒêƒÉng k√Ω tham gia qua bot ho·∫∑c trong k√™nh s·ª± ki·ªán\n"
                "‚Ä¢ M·ªôt s·ªë s·ª± ki·ªán y√™u c·∫ßu c·∫£nh gi·ªõi t·ªëi thi·ªÉu"
            ),
            inline=False
        )

        return embed

    @commands.command(name='tutien')
    async def tutien(self, ctx):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n tu ti√™n t·ªïng quan"""
        try:
            # T·∫°o t·∫•t c·∫£ c√°c embed
            embeds = await asyncio.gather(
                self.get_cached_help("main"),
                self.get_cached_help("commands"),
                self.get_cached_help("exp"),
                self.get_cached_help("levels"),
                self.get_cached_help("sects")
            )

            # Th√™m footer cho t·∫•t c·∫£ embed
            for i, embed in enumerate(embeds, 1):
                if embed:  # Ki·ªÉm tra embed kh√¥ng None
                    embed.set_footer(text=f"Trang {i}/{len(embeds)} ‚Ä¢ S·ª≠ d·ª•ng !tutien ƒë·ªÉ xem l·∫°i")

            # G·ª≠i t·∫•t c·∫£ embed
            await ctx.send(embeds=[e for e in embeds if e])

        except Exception as e:
            print(f"L·ªói khi hi·ªÉn th·ªã help: {e}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã h∆∞·ªõng d·∫´n. Vui l√≤ng th·ª≠ l·∫°i sau!")

    @commands.command(name='help')
    async def help_command(self, ctx, *, query: str = None):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ l·ªánh ho·∫∑c ch·ªß ƒë·ªÅ"""
        try:
            # N·∫øu kh√¥ng c√≥ query, hi·ªÉn th·ªã help ch√≠nh
            if not query:
                main_embed = await self.get_cached_help("main")
                await ctx.send(embed=main_embed)
                return

            # Ki·ªÉm tra xem query c√≥ ph·∫£i l√† ch·ªß ƒë·ªÅ kh√¥ng
            query = query.lower()
            if query in self.topics:
                embed = await self.get_cached_help(query)
                if embed:
                    await ctx.send(embed=embed)
                    return

            # Ki·ªÉm tra xem query c√≥ ph·∫£i l√† l·ªánh kh√¥ng
            command = self.bot.get_command(query)
            if command:
                await self.send_command_help(ctx, command)
                return

            # N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m ki·∫øm g·∫ßn ƒë√∫ng
            await self.send_search_results(ctx, query)

        except Exception as e:
            print(f"L·ªói khi hi·ªÉn th·ªã help: {e}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã h∆∞·ªõng d·∫´n. Vui l√≤ng th·ª≠ l·∫°i sau!")

    async def send_command_help(self, ctx, command):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ"""
        # T·∫°o embed th√¥ng tin l·ªánh
        embed = discord.Embed(
            title=f"üìñ H∆∞·ªõng D·∫´n: !{command.name}",
            description=command.help or "Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.",
            color=0x3498db
        )

        # Th√™m c√°ch s·ª≠ d·ª•ng
        usage = command.usage or ""
        embed.add_field(
            name="üîç C√°ch S·ª≠ D·ª•ng",
            value=f"`!{command.name} {usage}`",
            inline=False
        )

        # Th√™m c√°c t√™n g·ªçi kh√°c
        if command.aliases:
            embed.add_field(
                name="üîÑ T√™n G·ªçi Kh√°c",
                value=", ".join([f"`!{alias}`" for alias in command.aliases]),
                inline=False
            )

        # Th√™m th√¥ng tin cooldown n·∫øu c√≥
        if command._buckets and command._buckets._cooldown:
            cooldown = command._buckets._cooldown
            embed.add_field(
                name="‚è±Ô∏è Cooldown",
                value=f"{cooldown.rate} l·∫ßn trong {cooldown.per:.0f} gi√¢y",
                inline=True
            )

        # Th√™m th√¥ng tin quy·ªÅn h·∫°n n·∫øu c√≥
        if command.checks:
            permissions = []
            for check in command.checks:
                if "has_permissions" in str(check):
                    permissions.append("Y√™u c·∫ßu quy·ªÅn qu·∫£n tr·ªã")
                elif "is_owner" in str(check):
                    permissions.append("Ch·ªâ d√†nh cho ch·ªß bot")
                elif "guild_only" in str(check):
                    permissions.append("Ch·ªâ s·ª≠ d·ª•ng trong server")

            if permissions:
                embed.add_field(
                    name="üîí Y√™u C·∫ßu",
                    value="\n".join(permissions),
                    inline=True
                )

        # Th√™m v√≠ d·ª• s·ª≠ d·ª•ng
        examples = self.get_command_examples(command.name)
        if examples:
            embed.add_field(
                name="üìù V√≠ D·ª•",
                value="\n".join(examples),
                inline=False
            )

        await ctx.send(embed=embed)

    def get_command_examples(self, command_name: str) -> List[str]:
        """L·∫•y c√°c v√≠ d·ª• s·ª≠ d·ª•ng cho l·ªánh"""
        examples = {
            "tuvi": [
                "`!tuvi` - Xem tu vi c·ªßa b·∫£n th√¢n",
                "`!tuvi @Nguy·ªÖn VƒÉn A` - Xem tu vi c·ªßa ng∆∞·ªùi kh√°c"
            ],
            "daily": [
                "`!daily` - ƒêi·ªÉm danh nh·∫≠n th∆∞·ªüng h√†ng ng√†y"
            ],
            "danhquai": [
                "`!danhquai` - ƒê√°nh qu√°i v·∫≠t ng·∫´u nhi√™n"
            ],
            "danhboss": [
                "`!danhboss` - ƒê√°nh boss m·ªôt m√¨nh",
                "`!danhboss @Nguy·ªÖn VƒÉn A @Nguy·ªÖn VƒÉn B` - R·ªß ng∆∞·ªùi kh√°c c√πng ƒë√°nh boss"
            ],
            "combat": [
                "`!combat @Nguy·ªÖn VƒÉn A` - Th√°ch ƒë·∫•u PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c"
            ],
            "top": [
                "`!top` - Xem top 10 ng∆∞·ªùi ch∆°i",
                "`!top all 20` - Xem top 20 ng∆∞·ªùi ch∆°i",
                "`!top sect` - Xem top theo m√¥n ph√°i"
            ],
            "tongmon": [
                "`!tongmon` - Xem danh s√°ch m√¥n ph√°i",
                "`!tongmon join Thi√™n Ki·∫øm T√¥ng` - Gia nh·∫≠p m√¥n ph√°i"
            ]
        }

        return examples.get(command_name, [])

    async def send_search_results(self, ctx, query: str):
        """T√¨m ki·∫øm v√† hi·ªÉn th·ªã k·∫øt qu·∫£ g·∫ßn ƒë√∫ng"""
        # T√¨m ki·∫øm trong c√°c l·ªánh
        commands = []
        for command in self.bot.commands:
            if query in command.name or any(query in alias for alias in command.aliases):
                commands.append(command)

        # T√¨m ki·∫øm trong c√°c ch·ªß ƒë·ªÅ
        topics = []
        for topic, title in self.topics.items():
            if query in topic or query in title.lower():
                topics.append((topic, title))

        # T·∫°o embed k·∫øt qu·∫£ t√¨m ki·∫øm
        embed = discord.Embed(
            title=f"üîç K·∫øt Qu·∫£ T√¨m Ki·∫øm: '{query}'",
            description="D∆∞·ªõi ƒë√¢y l√† c√°c k·∫øt qu·∫£ ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n:",
            color=0x3498db
        )

        # Th√™m k·∫øt qu·∫£ l·ªánh
        if commands:
            command_list = []
            for cmd in commands[:5]:  # Gi·ªõi h·∫°n 5 k·∫øt qu·∫£
                desc = cmd.help.split('\n')[0] if cmd.help else "Kh√¥ng c√≥ m√¥ t·∫£"
                command_list.append(f"‚Ä¢ `!{cmd.name}` - {desc[:50]}...")

            embed.add_field(
                name="üéÆ L·ªánh",
                value="\n".join(command_list) if command_list else "Kh√¥ng t√¨m th·∫•y l·ªánh ph√π h·ª£p",
                inline=False
            )

        # Th√™m k·∫øt qu·∫£ ch·ªß ƒë·ªÅ
        if topics:
            topic_list = []
            for topic_id, title in topics:
                topic_list.append(f"‚Ä¢ `!help {topic_id}` - {title}")

            embed.add_field(
                name="üìö Ch·ªß ƒê·ªÅ",
                value="\n".join(topic_list) if topic_list else "Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ ph√π h·ª£p",
                inline=False
            )

        # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ n√†o
        if not commands and not topics:
            embed.description = f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho '{query}'. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c."
            embed.add_field(
                name="üí° G·ª£i √ù",
                value=(
                    "‚Ä¢ S·ª≠ d·ª•ng `!help` ƒë·ªÉ xem danh s√°ch ch·ªß ƒë·ªÅ\n"
                    "‚Ä¢ S·ª≠ d·ª•ng `!tutien` ƒë·ªÉ xem h∆∞·ªõng d·∫´n t·ªïng quan\n"
                    "‚Ä¢ Ki·ªÉm tra l·∫°i ch√≠nh t·∫£ c·ªßa t·ª´ kh√≥a"
                ),
                inline=False
            )

        await ctx.send(embed=embed)

    @commands.command(name='helpinteractive', aliases=['helpint'])
    async def help_interactive(self, ctx):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c"""
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ phi√™n t∆∞∆°ng t√°c ch∆∞a
        if ctx.author.id in self.interactive_sessions:
            await ctx.send("B·∫°n ƒë√£ c√≥ m·ªôt phi√™n h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng k·∫øt th√∫c phi√™n ƒë√≥ tr∆∞·ªõc.")
            return

        # T·∫°o embed ch√≠nh
        main_embed = await self.get_cached_help("main")

        # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng n√∫t
        main_embed.add_field(
            name="üîÑ H∆∞·ªõng D·∫´n T∆∞∆°ng T√°c",
            value=(
                "S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng:\n"
                "‚Ä¢ ‚èÆÔ∏è - Trang ƒë·∫ßu\n"
                "‚Ä¢ ‚óÄÔ∏è - Trang tr∆∞·ªõc\n"
                "‚Ä¢ ‚ñ∂Ô∏è - Trang ti·∫øp\n"
                "‚Ä¢ ‚è≠Ô∏è - Trang cu·ªëi\n"
                "‚Ä¢ ‚ùå - ƒê√≥ng h∆∞·ªõng d·∫´n"
            ),
            inline=False
        )

        # G·ª≠i embed v√† th√™m reaction
        message = await ctx.send(embed=main_embed)

        # Th√™m c√°c reaction ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
        for emoji in self.nav_emojis.values():
            await message.add_reaction(emoji)

        # L∆∞u th√¥ng tin phi√™n t∆∞∆°ng t√°c
        self.interactive_sessions[ctx.author.id] = {
            "message_id": message.id,
            "channel_id": ctx.channel.id,
            "current_page": 0,
            "pages": ["main", "commands", "exp", "levels", "sects", "combat", "items", "events"]
        }

        # T·∫°o task ƒë·ªÉ t·ª± ƒë·ªông k·∫øt th√∫c phi√™n sau 5 ph√∫t
        self.bot.loop.create_task(self.end_interactive_session(ctx.author.id, 300))

    async def end_interactive_session(self, user_id: int, delay: int):
        """K·∫øt th√∫c phi√™n t∆∞∆°ng t√°c sau m·ªôt kho·∫£ng th·ªùi gian"""
        await asyncio.sleep(delay)
        if user_id in self.interactive_sessions:
            del self.interactive_sessions[user_id]

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        """X·ª≠ l√Ω ph·∫£n ·ª©ng cho h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c"""
        # B·ªè qua ph·∫£n ·ª©ng c·ªßa bot
        if user.bot:
            return

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ phi√™n t∆∞∆°ng t√°c kh√¥ng
        if user.id not in self.interactive_sessions:
            return

        # L·∫•y th√¥ng tin phi√™n
        session = self.interactive_sessions[user.id]

        # Ki·ªÉm tra xem reaction c√≥ ph·∫£i tr√™n tin nh·∫Øn c·ªßa phi√™n kh√¥ng
        if reaction.message.id != session["message_id"]:
            return

        # X·ª≠ l√Ω c√°c lo·∫°i reaction
        emoji = str(reaction.emoji)
        current_page = session["current_page"]
        pages = session["pages"]

        # X√≥a reaction c·ªßa ng∆∞·ªùi d√πng
        try:
            await reaction.remove(user)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng c√≥ quy·ªÅn x√≥a reaction

        # X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng
        if emoji == self.nav_emojis["first"]:
            current_page = 0
        elif emoji == self.nav_emojis["prev"]:
            current_page = max(0, current_page - 1)
        elif emoji == self.nav_emojis["next"]:
            current_page = min(len(pages) - 1, current_page + 1)
        elif emoji == self.nav_emojis["last"]:
            current_page = len(pages) - 1
        elif emoji == self.nav_emojis["close"]:
            # K·∫øt th√∫c phi√™n
            del self.interactive_sessions[user.id]
            try:
                await reaction.message.clear_reactions()
            except:
                pass
            return

        # C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
        session["current_page"] = current_page

        # L·∫•y embed m·ªõi
        new_embed = await self.get_cached_help(pages[current_page])

        # Th√™m th√¥ng tin trang
        new_embed.set_footer(text=f"Trang {current_page + 1}/{len(pages)} ‚Ä¢ {self.topics[pages[current_page]]}")

        # C·∫≠p nh·∫≠t tin nh·∫Øn
        try:
            channel = self.bot.get_channel(session["channel_id"])
            message = await channel.fetch_message(session["message_id"])
            await message.edit(embed=new_embed)
        except:
            # N·∫øu c√≥ l·ªói, k·∫øt th√∫c phi√™n
            if user.id in self.interactive_sessions:
                del self.interactive_sessions[user.id]

    @commands.command(name='helpupdate')
    @commands.has_permissions(administrator=True)
    async def update_help_cache(self, ctx):
        """C·∫≠p nh·∫≠t cache help (Admin only)"""
        try:
            async with self.cache_lock:
                self.help_cache.clear()
            await ctx.send("‚úÖ ƒê√£ c·∫≠p nh·∫≠t cache help th√†nh c√¥ng!")
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t cache help: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t cache!")

    @commands.command(name='helpadmin')
    @commands.has_permissions(administrator=True)
    async def help_admin(self, ctx):
        """Hi·ªÉn th·ªã c√°c l·ªánh qu·∫£n tr·ªã (Admin only)"""
        embed = discord.Embed(
            title="üëë L·ªánh Qu·∫£n Tr·ªã",
            description="C√°c l·ªánh d√†nh cho qu·∫£n tr·ªã vi√™n:",
            color=0xe74c3c
        )

        # Qu·∫£n l√Ω ng∆∞·ªùi ch∆°i
        embed.add_field(
            name="üë• Qu·∫£n L√Ω Ng∆∞·ªùi Ch∆°i",
            value=(
                "`!setexp @user [s·ªë_exp]` - ƒê·∫∑t EXP cho ng∆∞·ªùi ch∆°i\n"
                "`!addexp @user [s·ªë_exp]` - Th√™m EXP cho ng∆∞·ªùi ch∆°i\n"
                "`!setlevel @user [c·∫£nh_gi·ªõi]` - ƒê·∫∑t c·∫£nh gi·ªõi cho ng∆∞·ªùi ch∆°i\n"
                "`!resetplayer @user` - Reset d·ªØ li·ªáu ng∆∞·ªùi ch∆°i"
            ),
            inline=False
        )

        # Qu·∫£n l√Ω h·ªá th·ªëng
        embed.add_field(
            name="‚öôÔ∏è Qu·∫£n L√Ω H·ªá Th·ªëng",
            value=(
                "`!reload [module]` - T·∫£i l·∫°i module\n"
                "`!helpupdate` - C·∫≠p nh·∫≠t cache help\n"
                "`!announce [n·ªôi_dung]` - G·ª≠i th√¥ng b√°o to√†n server\n"
                "`!setcooldown [l·ªánh] [gi√¢y]` - ƒê·∫∑t cooldown cho l·ªánh"
            ),
            inline=False
        )

        # Qu·∫£n l√Ω s·ª± ki·ªán
        embed.add_field(
            name="üéâ Qu·∫£n L√Ω S·ª± Ki·ªán",
            value=(
                "`!createevent [t√™n] [m√¥_t·∫£]` - T·∫°o s·ª± ki·ªán m·ªõi\n"
                "`!endevent [id]` - K·∫øt th√∫c s·ª± ki·ªán\n"
                "`!addboss [t√™n] [HP] [ATK] [DEF]` - Th√™m boss m·ªõi\n"
                "`!additem [t√™n] [lo·∫°i] [hi·∫øm]` - Th√™m v·∫≠t ph·∫©m m·ªõi"
            ),
            inline=False
        )

        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(Help(bot))