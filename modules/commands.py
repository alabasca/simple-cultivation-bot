# modules/commands.py
import discord
from discord.ext import commands
from datetime import datetime, timedelta
import random
import asyncio
from typing import Dict, Any, List, Optional
from modules.shared_commands import handle_daily_command
from config import SECTS, SECT_EMOJIS, SECT_COLORS


class Commands(commands.Cog):
    """C√°c l·ªánh ti·ªán √≠ch trong h·ªá th·ªëng Tu Ti√™n"""

    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.command_cooldowns = {}  # Cache cho cooldown

    @commands.command(name="dailycmd", aliases=["nhanqua"], usage="")
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def daily_cmd(self, ctx):  # ƒê·ªïi t√™n h√†m ƒë·ªÉ ph√π h·ª£p v·ªõi t√™n l·ªánh
        """ƒêi·ªÉm danh h√†ng ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng (alias c·ªßa !daily)"""
        await handle_daily_command(ctx, self.db)  # G·ªçi h√†m x·ª≠ l√Ω chung

    @commands.Cog.listener()
    async def on_ready(self):
        """Th√¥ng b√°o khi module ƒë√£ s·∫µn s√†ng"""
        print("‚úì Module Commands ƒë√£ s·∫µn s√†ng!")

    @commands.command(name="server_info", aliases=["thongtin", "server"], usage="")
    @commands.guild_only()
    async def server_info(self, ctx):
        """Xem th√¥ng tin server tu ti√™n"""
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            loading_msg = await ctx.send("‚è≥ ƒêang t·∫£i th√¥ng tin server...")

            guild = ctx.guild

            # ƒê·∫øm s·ªë ng∆∞·ªùi trong t·ª´ng m√¥n ph√°i
            sect_counts = {}
            active_players = 0
            total_exp = 0

            # L·∫•y danh s√°ch ng∆∞·ªùi ch∆°i t·ª´ database
            all_players = await self.db.get_all_players()
            for player in all_players:
                if player.get('sect'):
                    sect_name = player.get('sect')
                    sect_counts[sect_name] = sect_counts.get(sect_name, 0) + 1
                    total_exp += player.get('exp', 0)
                    active_players += 1

            embed = discord.Embed(
                title=f"üìä Th√¥ng Tin {guild.name}",
                description="Th√¥ng tin chi ti·∫øt v·ªÅ t√¥ng m√¥n",
                color=0x2ecc71,
                timestamp=datetime.now()
            )

            # Th√¥ng tin c∆° b·∫£n
            embed.add_field(
                name="üë• T·ªïng Th√†nh Vi√™n",
                value=f"{guild.member_count:,}",
                inline=True
            )
            embed.add_field(
                name="üî∞ Tu Sƒ© Ho·∫°t ƒê·ªông",
                value=f"{active_players:,}",
                inline=True
            )
            embed.add_field(
                name="üìà T·ªïng Tu Vi",
                value=f"{total_exp:,} EXP",
                inline=True
            )

            # Th√™m th√¥ng tin v·ªÅ th·ªùi gian
            embed.add_field(
                name="üìÖ Ng√†y Th√†nh L·∫≠p",
                value=guild.created_at.strftime("%d/%m/%Y"),
                inline=True
            )
            embed.add_field(
                name="‚è±Ô∏è Tu·ªïi Server",
                value=self.format_time_difference(guild.created_at),
                inline=True
            )
            embed.add_field(
                name="üîÑ Ho·∫°t ƒê·ªông",
                value=f"{active_players / guild.member_count * 100:.1f}% th√†nh vi√™n",
                inline=True
            )

            # Th√¥ng tin m√¥n ph√°i
            if sect_counts:
                # S·∫Øp x·∫øp c√°c m√¥n ph√°i theo s·ªë l∆∞·ª£ng th√†nh vi√™n
                sorted_sects = sorted(sect_counts.items(), key=lambda x: x[1], reverse=True)

                # Th√™m emoji v√†o t√™n m√¥n ph√°i n·∫øu c√≥
                sect_info = []
                for name, count in sorted_sects:
                    emoji = SECT_EMOJIS.get(name, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"
                    sect_info.append(f"{emoji} {name}: {count} tu sƒ©")

                sect_text = "\n".join(sect_info)
            else:
                sect_text = "Ch∆∞a c√≥ tu sƒ© n√†o"

            embed.add_field(
                name="üèØ Ph√¢n B·ªë M√¥n Ph√°i",
                value=f"```\n{sect_text}\n```",
                inline=False
            )

            # Th√™m icon server
            if guild.icon:
                embed.set_thumbnail(url=guild.icon.url)

            # Th√™m footer
            channel_count = len(guild.text_channels) + len(guild.voice_channels)
            embed.set_footer(text=f"Server ID: {guild.id} ‚Ä¢ {channel_count} k√™nh ‚Ä¢ {len(guild.roles)} roles")

            # G·ª≠i embed v√† x√≥a th√¥ng b√°o ƒëang t·∫£i
            await ctx.send(embed=embed)
            await loading_msg.delete()

        except Exception as e:
            print(f"L·ªói khi xem th√¥ng tin server: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin server!")

    @commands.command(name="top", aliases=["bangxephang", "bxh", "xephang"], usage="[all/sect/pvp] [s·ªë_l∆∞·ª£ng]")
    @commands.guild_only()
    async def leaderboard(self, ctx, type_str="all", limit: int = 10):
        """Xem b·∫£ng x·∫øp h·∫°ng tu sƒ©"""
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            loading_msg = await ctx.send("‚è≥ ƒêang t·∫£i b·∫£ng x·∫øp h·∫°ng...")

            # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng hi·ªÉn th·ªã
            limit = min(max(1, limit), 20)

            # Chuy·ªÉn lo·∫°i x·∫øp h·∫°ng v·ªÅ ch·ªØ th∆∞·ªùng
            type_str = type_str.lower()

            if type_str in ["sect", "m√¥n ph√°i", "monphai", "m√¥n", "ph√°i"]:
                # B·∫£ng x·∫øp h·∫°ng theo m√¥n ph√°i
                embed = await self.create_sect_leaderboard(limit)

            elif type_str in ["pvp", "combat", "pk", "ƒë·∫•u"]:
                # B·∫£ng x·∫øp h·∫°ng theo chi·∫øn th·∫Øng PvP
                embed = await self.create_pvp_leaderboard(ctx, limit)

            else:
                # B·∫£ng x·∫øp h·∫°ng c√° nh√¢n theo tu vi
                embed = await self.create_player_leaderboard(ctx, limit)

            # Th√™m th·ªùi gian c·∫≠p nh·∫≠t
            embed.set_footer(text=f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")

            # G·ª≠i embed v√† x√≥a th√¥ng b√°o ƒëang t·∫£i
            await ctx.send(embed=embed)
            await loading_msg.delete()

        except Exception as e:
            print(f"L·ªói khi xem b·∫£ng x·∫øp h·∫°ng: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y b·∫£ng x·∫øp h·∫°ng!")

    async def create_sect_leaderboard(self, limit: int) -> discord.Embed:
        """T·∫°o b·∫£ng x·∫øp h·∫°ng m√¥n ph√°i"""
        all_players = await self.db.get_all_players()
        sect_stats = {}

        # T√≠nh t·ªïng exp v√† s·ªë l∆∞·ª£ng th√†nh vi√™n theo m√¥n ph√°i
        for player in all_players:
            sect = player.get('sect')
            if sect:
                if sect not in sect_stats:
                    sect_stats[sect] = {
                        "exp": 0,
                        "members": 0,
                        "avg_exp": 0
                    }

                sect_stats[sect]["exp"] += player.get('exp', 0)
                sect_stats[sect]["members"] += 1

        # T√≠nh trung b√¨nh exp
        for sect in sect_stats:
            if sect_stats[sect]["members"] > 0:
                sect_stats[sect]["avg_exp"] = sect_stats[sect]["exp"] // sect_stats[sect]["members"]

        # S·∫Øp x·∫øp c√°c m√¥n ph√°i theo t·ªïng exp
        sorted_sects = sorted(sect_stats.items(), key=lambda x: x[1]["exp"], reverse=True)

        embed = discord.Embed(
            title="üèØ B·∫£ng X·∫øp H·∫°ng M√¥n Ph√°i",
            description="T·ªïng tu vi c·ªßa c√°c m√¥n ph√°i",
            color=0xf1c40f
        )

        for i, (sect, stats) in enumerate(sorted_sects[:limit], 1):
            medal = self.get_rank_medal(i)

            # Ch·ªçn m√†u t∆∞∆°ng ·ª©ng cho m√¥n ph√°i n·∫øu c√≥
            color_hex = SECT_COLORS.get(sect, "üîµ") if 'SECT_COLORS' in globals() else "üîµ"
            emoji = SECT_EMOJIS.get(sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

            embed.add_field(
                name=f"{medal} {emoji} {sect}",
                value=(
                    f"```\n"
                    f"T·ªïng Tu Vi: {stats['exp']:,} EXP\n"
                    f"Th√†nh vi√™n: {stats['members']} tu sƒ©\n"
                    f"Trung b√¨nh: {stats['avg_exp']:,} EXP/ng∆∞·ªùi\n"
                    f"X·∫øp H·∫°ng: #{i}\n"
                    f"```"
                ),
                inline=False
            )

        return embed

    async def create_pvp_leaderboard(self, ctx, limit: int) -> discord.Embed:
        """T·∫°o b·∫£ng x·∫øp h·∫°ng d·ª±a tr√™n th√†nh t√≠ch PvP"""
        all_players = await self.db.get_all_players()

        # L·ªçc ng∆∞·ªùi ch∆°i c√≥ th√¥ng tin PvP
        pvp_players = []
        for player in all_players:
            stats = player.get('stats', {})
            wins = stats.get('pvp_wins', 0)
            losses = stats.get('pvp_losses', 0)

            if wins > 0 or losses > 0:
                # T√≠nh t·ª∑ l·ªá th·∫Øng
                total_matches = wins + losses
                win_rate = wins / total_matches if total_matches > 0 else 0

                pvp_players.append({
                    "user_id": player.get('user_id'),
                    "wins": wins,
                    "losses": losses,
                    "total": total_matches,
                    "win_rate": win_rate,
                    "level": player.get('level', 'Ph√†m Nh√¢n'),
                    "sect": player.get('sect', 'Kh√¥ng c√≥')
                })

        # S·∫Øp x·∫øp theo s·ªë tr·∫≠n th·∫Øng, sau ƒë√≥ theo t·ª∑ l·ªá th·∫Øng
        sorted_players = sorted(
            pvp_players,
            key=lambda x: (x['wins'], x['win_rate']),
            reverse=True
        )

        embed = discord.Embed(
            title="‚öîÔ∏è B·∫£ng X·∫øp H·∫°ng PvP",
            description="Nh·ªØng cao th·ªß chi·∫øn ƒë·∫•u h√†ng ƒë·∫ßu",
            color=0xe74c3c
        )

        for i, player_data in enumerate(sorted_players[:limit], 1):
            member = ctx.guild.get_member(player_data['user_id'])
            if member:
                medal = self.get_rank_medal(i)
                win_rate_percent = player_data['win_rate'] * 100

                embed.add_field(
                    name=f"{medal} {member.display_name}",
                    value=(
                        f"```\n"
                        f"Th·∫Øng: {player_data['wins']} | Thua: {player_data['losses']}\n"
                        f"T·ª∑ l·ªá th·∫Øng: {win_rate_percent:.1f}%\n"
                        f"C·∫£nh Gi·ªõi: {player_data['level']}\n"
                        f"M√¥n Ph√°i: {player_data['sect']}\n"
                        f"```"
                    ),
                    inline=False
                )

        return embed

    async def create_player_leaderboard(self, ctx, limit: int) -> discord.Embed:
        """T·∫°o b·∫£ng x·∫øp h·∫°ng tu sƒ© theo exp"""
        top_players = await self.db.get_top_players(limit)

        embed = discord.Embed(
            title="üëë B·∫£ng X·∫øp H·∫°ng Tu Sƒ©",
            description="Nh·ªØng tu sƒ© c√≥ tu vi cao nh·∫•t",
            color=0xf1c40f
        )

        for i, player in enumerate(top_players, 1):
            member = ctx.guild.get_member(player.get('user_id'))
            if member:
                medal = self.get_rank_medal(i)
                sect = player.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
                emoji = SECT_EMOJIS.get(sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

                embed.add_field(
                    name=f"{medal} {member.display_name}",
                    value=(
                        f"```\n"
                        f"C·∫£nh Gi·ªõi: {player.get('level', 'Ph√†m Nh√¢n')}\n"
                        f"Tu Vi: {player.get('exp', 0):,} EXP\n"
                        f"M√¥n Ph√°i: {emoji} {sect}\n"
                        f"```"
                    ),
                    inline=False
                )

        return embed

    def get_rank_medal(self, rank):
        """L·∫•y huy hi·ªáu theo th·ª© h·∫°ng"""
        if rank == 1:
            return "ü•á"
        elif rank == 2:
            return "ü•à"
        elif rank == 3:
            return "ü•â"
        return f"#{rank}"

    @commands.command(name="stats", aliases=["thongke", "stat", "tk"], usage="")
    @commands.guild_only()
    async def stats(self, ctx):
        """Xem th·ªëng k√™ chi ti·∫øt server"""
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            loading_msg = await ctx.send("‚è≥ ƒêang t·∫£i th·ªëng k√™...")

            # L·∫•y t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            all_players = await self.db.get_all_players()

            # Kh·ªüi t·∫°o bi·∫øn th·ªëng k√™
            level_stats = {}
            sect_stats = {}
            total_exp = 0
            active_players = len(all_players)
            highest_level = {"player": None, "level": "Ph√†m Nh√¢n"}
            highest_exp = {"player": None, "exp": 0}

            # Th·ªëng k√™ PvP
            total_pvp_matches = 0
            total_monsters_killed = 0
            total_bosses_killed = 0

            # Ph√¢n t√≠ch d·ªØ li·ªáu
            for player in all_players:
                # Th·ªëng k√™ c·∫£nh gi·ªõi
                level = player.get('level', 'Ph√†m Nh√¢n')
                level_stats[level] = level_stats.get(level, 0) + 1

                # Th·ªëng k√™ m√¥n ph√°i
                sect = player.get('sect', 'Kh√¥ng c√≥')
                sect_stats[sect] = sect_stats.get(sect, 0) + 1

                # T·ªïng exp
                player_exp = player.get('exp', 0)
                total_exp += player_exp

                # T√¨m ng∆∞·ªùi ch∆°i cao c·∫•p nh·∫•t
                member = ctx.guild.get_member(player.get('user_id'))
                if member:
                    if self.compare_levels(level, highest_level["level"]) > 0:
                        highest_level = {"player": member, "level": level}
                    if player_exp > highest_exp["exp"]:
                        highest_exp = {"player": member, "exp": player_exp}

                # Th·ªëng k√™ PvP v√† c√°c ho·∫°t ƒë·ªông kh√°c
                stats = player.get('stats', {})
                total_pvp_matches += stats.get('pvp_wins', 0) + stats.get('pvp_losses', 0)
                total_monsters_killed += stats.get('monsters_killed', 0)
                total_bosses_killed += stats.get('bosses_killed', 0)

            # T·∫°o embed th·ªëng k√™
            embed = discord.Embed(
                title="üìä Th·ªëng K√™ Chi Ti·∫øt T√¥ng M√¥n",
                description=f"Th√¥ng tin chi ti·∫øt v·ªÅ {ctx.guild.name}",
                color=0x3498db,
                timestamp=datetime.now()
            )

            # Th·ªëng k√™ c∆° b·∫£n
            embed.add_field(
                name="üë• T·ªïng S·ªë Tu Sƒ©",
                value=f"{active_players:,}",
                inline=True
            )
            embed.add_field(
                name="üìà T·ªïng Tu Vi",
                value=f"{total_exp:,} EXP",
                inline=True
            )
            embed.add_field(
                name="‚ö° Trung B√¨nh Tu Vi",
                value=f"{int(total_exp / active_players):,} EXP" if active_players > 0 else "0",
                inline=True
            )

            # Th√™m th·ªëng k√™ ho·∫°t ƒë·ªông
            embed.add_field(
                name="‚öîÔ∏è Ho·∫°t ƒê·ªông",
                value=(
                    f"PvP: {total_pvp_matches:,} tr·∫≠n\n"
                    f"Qu√°i v·∫≠t: {total_monsters_killed:,} con\n"
                    f"Boss: {total_bosses_killed:,} con"
                ),
                inline=True
            )

            # Th√¥ng tin ng∆∞·ªùi ch∆°i cao c·∫•p
            if highest_level["player"]:
                embed.add_field(
                    name="üëë Cao Th·ªß C·∫£nh Gi·ªõi",
                    value=(
                        f"ƒê·∫°o H·ªØu: {highest_level['player'].mention}\n"
                        f"C·∫£nh Gi·ªõi: {highest_level['level']}"
                    ),
                    inline=True
                )

            if highest_exp["player"] and highest_exp["player"] != highest_level["player"]:
                embed.add_field(
                    name="üíé Cao Th·ªß Tu Vi",
                    value=(
                        f"ƒê·∫°o H·ªØu: {highest_exp['player'].mention}\n"
                        f"Tu Vi: {highest_exp['exp']:,} EXP"
                    ),
                    inline=True
                )

            # Ph√¢n b·ªë c·∫£nh gi·ªõi
            if level_stats:
                level_info = "\n".join([
                    f"{level}: {count} tu sƒ©"
                    for level, count in sorted(
                        level_stats.items(),
                        key=lambda x: self.get_level_index(x[0])
                    )
                ])
            else:
                level_info = "Ch∆∞a c√≥ d·ªØ li·ªáu"

            embed.add_field(
                name="üåü Ph√¢n B·ªë C·∫£nh Gi·ªõi",
                value=f"```\n{level_info}\n```",
                inline=False
            )

            # Ph√¢n b·ªë m√¥n ph√°i
            if sect_stats:
                # Th√™m emoji cho t·ª´ng t√¥ng m√¥n
                sect_info_list = []
                for sect, count in sorted(sect_stats.items(), key=lambda x: x[1], reverse=True):
                    emoji = SECT_EMOJIS.get(sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"
                    sect_info_list.append(f"{emoji} {sect}: {count} ƒë·ªá t·ª≠")

                sect_info = "\n".join(sect_info_list)
            else:
                sect_info = "Ch∆∞a c√≥ d·ªØ li·ªáu"

            embed.add_field(
                name="üèØ Ph√¢n B·ªë M√¥n Ph√°i",
                value=f"```\n{sect_info}\n```",
                inline=False
            )

            # Th√™m icon server
            if ctx.guild.icon:
                embed.set_thumbnail(url=ctx.guild.icon.url)

            # Th√™m ghi ch√∫
            embed.set_footer(text="S·ª≠ d·ª•ng !top ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng chi ti·∫øt")

            # G·ª≠i embed v√† x√≥a th√¥ng b√°o ƒëang t·∫£i
            await ctx.send(embed=embed)
            await loading_msg.delete()

        except Exception as e:
            print(f"L·ªói khi xem th·ªëng k√™: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th·ªëng k√™!")

    def get_level_index(self, level):
        """L·∫•y th·ª© t·ª± c·ªßa c·∫£nh gi·ªõi ƒë·ªÉ s·∫Øp x·∫øp"""
        try:
            cultivation_cog = self.bot.get_cog('Cultivation')
            if cultivation_cog and hasattr(cultivation_cog, 'CULTIVATION_RANKS'):
                return cultivation_cog.CULTIVATION_RANKS.index(level)

            # D·ª± ph√≤ng: th·ª≠ l·∫•y t·ª´ config n·∫øu kh√¥ng c√≥ cog
            if hasattr(self.bot, 'config') and hasattr(self.bot.config, 'CULTIVATION_LEVELS'):
                levels = list(self.bot.config.CULTIVATION_LEVELS.keys())
                return levels.index(level) if level in levels else -1

            return -1
        except (ValueError, AttributeError, IndexError):
            return -1

    def compare_levels(self, level1, level2):
        """So s√°nh hai c·∫£nh gi·ªõi
        Returns: 1 n·∫øu level1 > level2, -1 n·∫øu level1 < level2, 0 n·∫øu b·∫±ng nhau"""
        idx1 = self.get_level_index(level1)
        idx2 = self.get_level_index(level2)
        return (idx1 > idx2) - (idx1 < idx2)

    @commands.command(name="roll", aliases=["random", "r", "x√∫c x·∫Øc", "xucxac"], usage="[s·ªë_l·ªõn_nh·∫•t]")
    async def roll(self, ctx, max_num: int = 100):
        """Random m·ªôt s·ªë ng·∫´u nhi√™n"""
        try:
            # Ki·ªÉm tra gi·ªõi h·∫°n
            max_num = max(1, min(max_num, 1000000))
            number = random.randint(1, max_num)

            # T·∫°o hi·ªáu ·ª©ng x√∫c x·∫Øc
            message = await ctx.send("üé≤ ƒêang tung x√∫c x·∫Øc...")

            # Hi·ªáu ·ª©ng ng·∫´u nhi√™n
            for i in range(3):
                await asyncio.sleep(0.7)
                await message.edit(content=f"üé≤ ƒêang tung x√∫c x·∫Øc... {random.randint(1, max_num)}")

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            embed = discord.Embed(
                title="üé≤ Thi√™n C∆° Hi·ªán",
                description=(
                    f"{ctx.author.mention} ƒë√£ tung x√∫c x·∫Øc!\n"
                    f"Con s·ªë ƒë·ªãnh m·ªánh l√†: **{number:,}**\n"
                    f"*(Trong kho·∫£ng 1 - {max_num:,})*"
                ),
                color=0x9b59b6,
                timestamp=datetime.now()
            )

            # Th√™m ghi ch√∫ n·∫øu l√† s·ªë ƒë·∫∑c bi·ªát
            if number == 1:
                embed.add_field(
                    name="üëë S·ªë M·ªôt",
                    value="ƒê·ªôc T√¥n Thi√™n H·∫°! M·ªôt ng√†y ƒë·∫πp tr·ªùi s·∫Øp ƒë·∫øn.",
                    inline=False
                )
            elif number == max_num:
                embed.add_field(
                    name="üéØ S·ªë T·ªëi ƒêa",
                    value="ƒê√£ ƒê·∫°t ƒê·∫øn ƒê·ªânh Cao! V·∫°n s·ª± hanh th√¥ng.",
                    inline=False
                )
            elif number == 69:
                embed.add_field(
                    name="üòè S·ªë May M·∫Øn",
                    value="S·ªë n√†y th·∫≠t... th√∫ v·ªã!",
                    inline=False
                )
            elif number == 88:
                embed.add_field(
                    name="üçÄ S·ªë Ph√°t T√†i",
                    value="C√°t t∆∞·ªùng nh∆∞ √Ω! V·∫°n s·ª± hanh th√¥ng.",
                    inline=False
                )
            elif number == 666:
                embed.add_field(
                    name="üòà Con S·ªë Qu·ª∑ D·ªØ",
                    value="H·∫Øc √°m l·ª±c l∆∞·ª£ng hi·ªán h·ªØu!",
                    inline=False
                )

            # X√≥a tin nh·∫Øn t·∫°m th·ªùi v√† g·ª≠i k·∫øt qu·∫£
            await message.delete()
            await ctx.send(embed=embed)

        except ValueError:
            await ctx.send("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!")
        except Exception as e:
            print(f"L·ªói khi roll s·ªë: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra!")

    @commands.command(name="ping", aliases=["latency", "zing"], usage="")
    async def ping(self, ctx):
        """Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot"""
        try:
            # ƒêo ƒë·ªô tr·ªÖ
            start_time = datetime.now()
            message = await ctx.send("üèì ƒêang ki·ªÉm tra...")
            end_time = datetime.now()

            # T√≠nh to√°n c√°c lo·∫°i ƒë·ªô tr·ªÖ
            api_latency = round(self.bot.latency * 1000)
            bot_latency = round((end_time - start_time).total_seconds() * 1000)

            # Hi·ªáu ·ª©ng ƒëo ƒë·ªô tr·ªÖ
            for i in range(3):
                dots = "." * (i + 1)
                await message.edit(content=f"üèì ƒêang ki·ªÉm tra{dots}")
                await asyncio.sleep(0.3)

            embed = discord.Embed(
                title="üèì T·ªëc ƒê·ªô K·∫øt N·ªëi",
                description=f"Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa {self.bot.user.name}",
                color=self.get_ping_color(api_latency),
                timestamp=datetime.now()
            )

            embed.add_field(
                name="‚ö° Discord API",
                value=f"{api_latency}ms",
                inline=True
            )
            embed.add_field(
                name="ü§ñ Bot Latency",
                value=f"{bot_latency}ms",
                inline=True
            )

            # Th√™m th√¥ng tin v·ªÅ th·ªùi gian ho·∫°t ƒë·ªông n·∫øu c√≥
            uptime = datetime.now() - getattr(self.bot, 'start_time', datetime.now())
            embed.add_field(
                name="‚è±Ô∏è Uptime",
                value=self.format_time_difference(datetime.now() - uptime),
                inline=True
            )

            # Th√™m ƒë√°nh gi√° t·ªëc ƒë·ªô
            status = self.get_ping_status(api_latency)
            embed.add_field(
                name="üìä Tr·∫°ng Th√°i",
                value=status,
                inline=False
            )

            # Th√™m icon bot
            if self.bot.user.avatar:
                embed.set_thumbnail(url=self.bot.user.avatar.url)

            await message.edit(content=None, embed=embed)

        except Exception as e:
            print(f"L·ªói khi ki·ªÉm tra ping: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra k·∫øt n·ªëi!")

    def get_ping_color(self, latency):
        """L·∫•y m√†u d·ª±a tr√™n ƒë·ªô tr·ªÖ"""
        if latency < 100:
            return 0x2ecc71  # Xanh l√°
        elif latency < 200:
            return 0xf1c40f  # V√†ng
        else:
            return 0xe74c3c  # ƒê·ªè

    def get_ping_status(self, latency):
        """L·∫•y ƒë√°nh gi√° d·ª±a tr√™n ƒë·ªô tr·ªÖ"""
        if latency < 100:
            return "üü¢ K·∫øt n·ªëi c·ª±c k·ª≥ ·ªïn ƒë·ªãnh"
        elif latency < 200:
            return "üü° K·∫øt n·ªëi t·∫°m ·ªïn"
        elif latency < 300:
            return "üü† K·∫øt n·ªëi h∆°i ch·∫≠m"
        else:
            return "üî¥ K·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh"

    def format_time_difference(self, time_diff):
        """Format th·ªùi gian theo d·∫°ng d·ªÖ ƒë·ªçc"""
        if isinstance(time_diff, datetime):
            time_diff = datetime.now() - time_diff

        days = time_diff.days
        hours, remainder = divmod(time_diff.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        parts = []
        if days > 0:
            parts.append(f"{days} ng√†y")
        if hours > 0:
            parts.append(f"{hours} gi·ªù")
        if minutes > 0:
            parts.append(f"{minutes} ph√∫t")
        if seconds > 0 and not parts:  # Ch·ªâ hi·ªán gi√¢y n·∫øu ch∆∞a c√≥ ph·∫ßn t·ª≠ n√†o
            parts.append(f"{seconds} gi√¢y")

        return ", ".join(parts)

    @commands.command(name="daily", aliases=["diemdanh", "ƒëi·ªÉm danh", "nhandiemdanh"], usage="")
    @commands.cooldown(1, 86400, commands.BucketType.user)
    async def daily(self, ctx):
        """ƒêi·ªÉm danh h√†ng ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng"""
        user_id = ctx.author.id

        try:
            # Ki·ªÉm tra ng∆∞·ªùi ch∆°i
            player = await self.db.get_player(user_id)
            if not player:
                await ctx.send(
                    f"{ctx.author.mention}, b·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! H√£y s·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i.")
                return

            # Ki·ªÉm tra th·ªùi gian ƒëi·ªÉm danh l·∫ßn tr∆∞·ªõc
            now = datetime.now()
            last_daily = player.get('last_daily')
            if isinstance(last_daily, str):
                try:
                    last_daily = datetime.strptime(last_daily, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    last_daily = datetime.min

            # T√≠nh th·ªùi gian tr√¥i qua t·ª´ l·∫ßn ƒëi·ªÉm danh tr∆∞·ªõc
            time_since_last = now - last_daily if last_daily else timedelta(days=2)

            # Ki·ªÉm tra streak
            streak = player.get('daily_streak', 0)
            if time_since_last.days > 2:  # Reset streak n·∫øu qu√° 2 ng√†y
                streak = 0

            # T√≠nh ph·∫ßn th∆∞·ªüng
            base_reward = 100  # EXP c∆° b·∫£n
            streak_bonus = min(streak * 0.1, 1.0)  # T·ªëi ƒëa 100% bonus

            reward = int(base_reward * (1 + streak_bonus))
            new_streak = streak + 1

            # X·ª≠ l√Ω ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát m·ªói 7 ng√†y
            special_reward = False
            special_reward_text = ""
            if new_streak % 7 == 0:
                special_reward = True
                bonus_exp = int(reward * 0.5)  # Th√™m 50% exp
                reward += bonus_exp
                special_reward_text = f"üéÅ **Ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát 7 ng√†y**: +{bonus_exp} EXP"

            # C·∫≠p nh·∫≠t ng∆∞·ªùi ch∆°i
            new_exp = player.get('exp', 0) + reward
            await self.db.update_player(
                user_id,
                exp=new_exp,
                last_daily=now,
                daily_streak=new_streak
            )

            # T·∫°o embed th√¥ng b√°o
            embed = discord.Embed(
                title="üìù ƒêi·ªÉm Danh Th√†nh C√¥ng",
                description=f"{ctx.author.mention} ƒë√£ ƒëi·ªÉm danh ng√†y h√¥m nay!",
                color=0x2ecc71,
                timestamp=now
            )

            # Th√¥ng tin ph·∫ßn th∆∞·ªüng
            embed.add_field(
                name="üèÆ Ph·∫ßn Th∆∞·ªüng",
                value=(
                    f"EXP c∆° b·∫£n: +{base_reward}\n"
                    f"Streak bonus: +{int(streak_bonus * 100)}%\n"
                    f"**T·ªïng c·ªông**: +{reward} EXP"
                ),
                inline=True
            )

            # Th√¥ng tin streak
            embed.add_field(
                name="üî• Streak",
                value=(
                    f"Streak hi·ªán t·∫°i: {new_streak} ng√†y\n"
                    f"Streak bonus: +{min(new_streak * 10, 100)}%\n"
                    f"Ng√†y ti·∫øp theo: {(new_streak + 1) % 7}/7"
                ),
                inline=True
            )

            # Th√™m th√¥ng tin ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát n·∫øu c√≥
            if special_reward:
                embed.add_field(
                    name="üéÅ Ph·∫ßn Th∆∞·ªüng ƒê·∫∑c Bi·ªát",
                    value=(
                        f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t streak {new_streak} ng√†y!\n"
                        f"{special_reward_text}"
                    ),
                    inline=False
                )

            # Th√™m th√¥ng tin tu vi
            embed.add_field(
                name="üìä Tu Vi",
                value=(
                    f"C·∫£nh gi·ªõi: {player.get('level', 'Ph√†m Nh√¢n')}\n"
                    f"Tu vi tr∆∞·ªõc: {player.get('exp', 0):,} EXP\n"
                    f"Tu vi hi·ªán t·∫°i: {new_exp:,} EXP"
                ),
                inline=False
            )

            # Th√™m avatar ng∆∞·ªùi ch∆°i
            if ctx.author.avatar:
                embed.set_thumbnail(url=ctx.author.avatar.url)

            # Th√™m footer
            embed.set_footer(text="H√£y ƒëi·ªÉm danh m·ªói ng√†y ƒë·ªÉ nh·∫≠n nhi·ªÅu ph·∫ßn th∆∞·ªüng h∆°n!")

            await ctx.send(embed=embed)

            # Ki·ªÉm tra thƒÉng c·∫•p
            cultivation_cog = self.bot.get_cog('Cultivation')
            if cultivation_cog:
                await cultivation_cog.check_level_up(ctx, player.get('level', 'Ph√†m Nh√¢n'), new_exp)

        except Exception as e:
            print(f"L·ªói khi ƒëi·ªÉm danh: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi ƒëi·ªÉm danh!")
            self.daily.reset_cooldown(ctx)

    @daily.error
    async def daily_error(self, ctx, error):
        """X·ª≠ l√Ω l·ªói l·ªánh daily"""
        if isinstance(error, commands.CommandOnCooldown):
            # T√≠nh th·ªùi gian c√≤n l·∫°i
            retry_after = int(error.retry_after)
            hours, remainder = divmod(retry_after, 3600)
            minutes, seconds = divmod(remainder, 60)

            # T√≠nh th·ªùi gian c√≥ th·ªÉ ƒëi·ªÉm danh ti·∫øp theo
            next_daily = datetime.now() + timedelta(seconds=retry_after)
            next_time = next_daily.strftime('%H:%M:%S')

            embed = discord.Embed(
                title="‚è≥ ƒêi·ªÉm Danh ƒê√£ Th·ª±c Hi·ªán",
                description=f"{ctx.author.mention}, b·∫°n ƒë√£ ƒëi·ªÉm danh h√¥m nay r·ªìi!",
                color=0xf1c40f
            )

            embed.add_field(
                name="‚è∞ Th·ªùi Gian C√≤n L·∫°i",
                value=f"{hours} gi·ªù, {minutes} ph√∫t, {seconds} gi√¢y",
                inline=True
            )

            embed.add_field(
                name="üìÖ L·∫ßn Ti·∫øp Theo",
                value=f"Quay l·∫°i v√†o l√∫c {next_time} ƒë·ªÉ ƒëi·ªÉm danh ti·∫øp!",
                inline=True
            )

            await ctx.send(embed=embed)
        else:
            print(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong daily: {error}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh ƒëi·ªÉm danh!")

    @commands.command(name="help", aliases=["h", "commands", "cmd"], usage="[l·ªánh]")
    async def help_command(self, ctx, command_name: str = None):
        """Hi·ªÉn th·ªã danh s√°ch l·ªánh v√† h∆∞·ªõng d·∫´n"""
        if command_name:
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ
            await self.show_command_help(ctx, command_name)
        else:
            # Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ l·ªánh
            await self.show_all_commands(ctx)

    async def show_command_help(self, ctx, command_name: str):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ"""
        # T√¨m l·ªánh
        command = self.bot.get_command(command_name)
        if not command:
            # Th·ª≠ t√¨m ki·∫øm theo alias
            for cmd in self.bot.commands:
                if command_name in cmd.aliases:
                    command = cmd
                    break

        if not command:
            await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh `{command_name}`!")
            return

        # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin l·ªánh
        embed = discord.Embed(
            title=f"üìñ L·ªánh: {ctx.prefix}{command.name}",
            description=command.help or "Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.",
            color=0x3498db,
            timestamp=datetime.now()
        )

        # C√°ch s·ª≠ d·ª•ng
        usage = command.usage or ""
        embed.add_field(
            name="üîç C√∫ Ph√°p",
            value=f"`{ctx.prefix}{command.name} {usage}`",
            inline=False
        )

        # C√°c t√™n thay th·∫ø
        if command.aliases:
            aliases = ", ".join([f"`{ctx.prefix}{alias}`" for alias in command.aliases])
            embed.add_field(
                name="üîÑ T√™n Thay Th·∫ø",
                value=aliases,
                inline=False
            )

        # Cooldown n·∫øu c√≥
        if command._buckets and command._buckets._cooldown:
            cooldown = command._buckets._cooldown
            embed.add_field(
                name="‚è±Ô∏è Cooldown",
                value=f"{cooldown.rate} l·∫ßn m·ªói {cooldown.per} gi√¢y",
                inline=True
            )

        # Ph√¢n lo·∫°i ng∆∞·ªùi d√πng
        if command.cog:
            embed.add_field(
                name="üìö Nh√≥m",
                value=command.cog.qualified_name,
                inline=True
            )

        # Th√™m v√≠ d·ª• s·ª≠ d·ª•ng
        example = f"{ctx.prefix}{command.name}"
        if usage:
            if "[" in usage:  # C√≥ tham s·ªë t√πy ch·ªçn
                example += " " + usage.replace("[", "").replace("]", "")
            else:
                example += " " + usage

        embed.add_field(
            name="üí° V√≠ D·ª•",
            value=f"`{example}`",
            inline=False
        )

        await ctx.send(embed=embed)

    async def show_all_commands(self, ctx):
        """Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ l·ªánh theo nh√≥m"""
        embed = discord.Embed(
            title="üìö Danh S√°ch L·ªánh Tu Ti√™n Bot",
            description=(
                f"S·ª≠ d·ª•ng `{ctx.prefix}help [l·ªánh]` ƒë·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ.\n"
                f"V√≠ d·ª•: `{ctx.prefix}help daily`"
            ),
            color=0x2ecc71,
            timestamp=datetime.now()
        )

        # Nh√≥m l·ªánh theo cog
        cog_commands = {}
        for command in self.bot.commands:
            if command.hidden:
                continue

            cog_name = command.cog.qualified_name if command.cog else "Kh√°c"
            if cog_name not in cog_commands:
                cog_commands[cog_name] = []

            cog_commands[cog_name].append(command)

        # Th√™m c√°c nh√≥m l·ªánh v√†o embed
        for cog_name, commands in sorted(cog_commands.items()):
            # T·∫°o danh s√°ch l·ªánh
            command_list = []
            for cmd in sorted(commands, key=lambda x: x.name):
                brief = cmd.help.split('\n')[0] if cmd.help else "Kh√¥ng c√≥ m√¥ t·∫£"
                command_list.append(f"`{ctx.prefix}{cmd.name}` - {brief[:40]}")

            embed.add_field(
                name=f"üîπ {cog_name}",
                value="\n".join(command_list) if command_list else "Kh√¥ng c√≥ l·ªánh",
                inline=False
            )

        # Th√™m th√¥ng tin b·ªï sung
        embed.set_footer(text=f"T·ªïng s·ªë l·ªánh: {sum(len(cmds) for cmds in cog_commands.values())}")

        if self.bot.user.avatar:
            embed.set_thumbnail(url=self.bot.user.avatar.url)

        await ctx.send(embed=embed)

    @commands.command(name="profile", aliases=["thongtin", "me", "info"], usage="[@ng∆∞·ªùi_ch∆°i]")
    async def profile(self, ctx, member: discord.Member = None):
        """Xem th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi ch∆°i"""
        # N·∫øu kh√¥ng cung c·∫•p member, l·∫•y th√¥ng tin ng∆∞·ªùi g·ªçi l·ªánh
        target = member or ctx.author

        try:
            # L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i
            player = await self.db.get_player(target.id)
            if not player:
                if target == ctx.author:
                    await ctx.send(
                        f"{ctx.author.mention}, b·∫°n ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán! H√£y s·ª≠ d·ª•ng l·ªánh `!tongmon` ƒë·ªÉ ch·ªçn m√¥n ph√°i.")
                else:
                    await ctx.send(f"{target.mention} ch∆∞a b·∫Øt ƒë·∫ßu tu luy·ªán!")
                return

            # T·∫°o embed th√¥ng tin ng∆∞·ªùi ch∆°i
            sect = player.get('sect', 'Kh√¥ng c√≥ m√¥n ph√°i')
            sect_emoji = SECT_EMOJIS.get(sect, "üèØ") if 'SECT_EMOJIS' in globals() else "üèØ"

            embed = discord.Embed(
                title=f"üìä Th√¥ng Tin Tu Sƒ©: {target.display_name}",
                description=f"ƒê·ªá t·ª≠ {sect_emoji} **{sect}**",
                color=SECT_COLORS.get(sect, 0x3498db) if 'SECT_COLORS' in globals() else 0x3498db,
                timestamp=datetime.now()
            )

            # Th√¥ng tin c∆° b·∫£n
            embed.add_field(
                name="üåü C·∫£nh Gi·ªõi",
                value=player.get('level', 'Ph√†m Nh√¢n'),
                inline=True
            )

            embed.add_field(
                name="üìà Tu Vi",
                value=f"{player.get('exp', 0):,} EXP",
                inline=True
            )

            # Th√™m th√¥ng tin v·ªÅ ng√†y tham gia
            joined_at = player.get('created_at')
            if joined_at:
                if isinstance(joined_at, str):
                    try:
                        joined_at = datetime.strptime(joined_at, '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        joined_at = None

                if joined_at:
                    time_diff = datetime.now() - joined_at
                    days = time_diff.days

                    embed.add_field(
                        name="‚è±Ô∏è Th·ªùi Gian Tu Luy·ªán",
                        value=f"{days} ng√†y",
                        inline=True
                    )

            # Th√¥ng tin chi·∫øn ƒë·∫•u
            stats = player.get('stats', {})

            # Ch·ªâ s·ªë chi·∫øn ƒë·∫•u
            embed.add_field(
                name="‚öîÔ∏è S·ª©c M·∫°nh",
                value=(
                    f"C√¥ng K√≠ch: {player.get('attack', 0)}\n"
                    f"Ph√≤ng Th·ªß: {player.get('defense', 0)}\n"
                    f"HP: {player.get('hp', 100)}/100"
                ),
                inline=True
            )

            # Th·ªëng k√™ chi·∫øn ƒë·∫•u
            pvp_wins = stats.get('pvp_wins', 0)
            pvp_losses = stats.get('pvp_losses', 0)
            total_pvp = pvp_wins + pvp_losses
            win_rate = (pvp_wins / total_pvp * 100) if total_pvp > 0 else 0

            embed.add_field(
                name="üìä Th√†nh T√≠ch PvP",
                value=(
                    f"Th·∫Øng: {pvp_wins} | Thua: {pvp_losses}\n"
                    f"T·ª∑ l·ªá th·∫Øng: {win_rate:.1f}%\n"
                    f"T·ªïng tr·∫≠n: {total_pvp}"
                ),
                inline=True
            )

            # Th√†nh t√≠ch sƒÉn qu√°i
            monsters_killed = stats.get('monsters_killed', 0)
            bosses_killed = stats.get('bosses_killed', 0)

            embed.add_field(
                name="üêâ Th√†nh T√≠ch SƒÉn Qu√°i",
                value=(
                    f"Qu√°i th∆∞·ªùng: {monsters_killed}\n"
                    f"Boss: {bosses_killed}\n"
                    f"T·ªïng: {monsters_killed + bosses_killed}"
                ),
                inline=True
            )

            # Th√¥ng tin streak
            daily_streak = player.get('daily_streak', 0)
            last_daily = player.get('last_daily')
            if isinstance(last_daily, str):
                try:
                    last_daily = datetime.strptime(last_daily, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    last_daily = datetime.min

            embed.add_field(
                name="üî• ƒêi·ªÉm Danh",
                value=(
                    f"Streak: {daily_streak} ng√†y\n"
                    f"Bonus: +{min(daily_streak * 10, 100)}%\n"
                    f"ƒê·∫∑c bi·ªát: {daily_streak % 7}/7 ng√†y"
                ),
                inline=True
            )

            # Th√™m avatar ng∆∞·ªùi ch∆°i
            if target.avatar:
                embed.set_thumbnail(url=target.avatar.url)

            # Th√™m footer
            embed.set_footer(text=f"ID: {target.id} ‚Ä¢ Th√†nh vi√™n t·ª´: {target.created_at.strftime('%d/%m/%Y')}")

            await ctx.send(embed=embed)

        except Exception as e:
            print(f"L·ªói khi xem th√¥ng tin ng∆∞·ªùi ch∆°i: {e}")
            await ctx.send("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!")


async def setup(bot):
    await bot.add_cog(Commands(bot, bot.db))